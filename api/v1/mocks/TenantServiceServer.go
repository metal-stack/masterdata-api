// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// TenantServiceServer is an autogenerated mock type for the TenantServiceServer type
type TenantServiceServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceServer) Create(_a0 context.Context, _a1 *v1.TenantCreateRequest) (*v1.TenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantCreateRequest) (*v1.TenantResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantCreateRequest) *v1.TenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceServer) Delete(_a0 context.Context, _a1 *v1.TenantDeleteRequest) (*v1.TenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantDeleteRequest) (*v1.TenantResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantDeleteRequest) *v1.TenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceServer) Find(_a0 context.Context, _a1 *v1.TenantFindRequest) (*v1.TenantListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *v1.TenantListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantFindRequest) (*v1.TenantListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantFindRequest) *v1.TenantListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantFindRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindParticipatingProjects provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceServer) FindParticipatingProjects(_a0 context.Context, _a1 *v1.FindParticipatingProjectsRequest) (*v1.FindParticipatingProjectsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindParticipatingProjects")
	}

	var r0 *v1.FindParticipatingProjectsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.FindParticipatingProjectsRequest) (*v1.FindParticipatingProjectsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.FindParticipatingProjectsRequest) *v1.FindParticipatingProjectsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.FindParticipatingProjectsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.FindParticipatingProjectsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindParticipatingTenants provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceServer) FindParticipatingTenants(_a0 context.Context, _a1 *v1.FindParticipatingTenantsRequest) (*v1.FindParticipatingTenantsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindParticipatingTenants")
	}

	var r0 *v1.FindParticipatingTenantsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.FindParticipatingTenantsRequest) (*v1.FindParticipatingTenantsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.FindParticipatingTenantsRequest) *v1.FindParticipatingTenantsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.FindParticipatingTenantsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.FindParticipatingTenantsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceServer) Get(_a0 context.Context, _a1 *v1.TenantGetRequest) (*v1.TenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantGetRequest) (*v1.TenantResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantGetRequest) *v1.TenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistory provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceServer) GetHistory(_a0 context.Context, _a1 *v1.TenantGetHistoryRequest) (*v1.TenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantGetHistoryRequest) (*v1.TenantResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantGetHistoryRequest) *v1.TenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantGetHistoryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTenantMembers provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceServer) ListTenantMembers(_a0 context.Context, _a1 *v1.ListTenantMembersRequest) (*v1.ListTenantMembersResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListTenantMembers")
	}

	var r0 *v1.ListTenantMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListTenantMembersRequest) (*v1.ListTenantMembersResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ListTenantMembersRequest) *v1.ListTenantMembersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListTenantMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ListTenantMembersRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceServer) Update(_a0 context.Context, _a1 *v1.TenantUpdateRequest) (*v1.TenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantUpdateRequest) (*v1.TenantResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantUpdateRequest) *v1.TenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTenantServiceServer creates a new instance of TenantServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenantServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenantServiceServer {
	mock := &TenantServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
