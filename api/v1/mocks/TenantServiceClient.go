// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/metal-stack/masterdata-api/api/v1"
)

// TenantServiceClient is an autogenerated mock type for the TenantServiceClient type
type TenantServiceClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, in, opts
func (_m *TenantServiceClient) Create(ctx context.Context, in *v1.TenantCreateRequest, opts ...grpc.CallOption) (*v1.TenantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantCreateRequest, ...grpc.CallOption) (*v1.TenantResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantCreateRequest, ...grpc.CallOption) *v1.TenantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantCreateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *TenantServiceClient) Delete(ctx context.Context, in *v1.TenantDeleteRequest, opts ...grpc.CallOption) (*v1.TenantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantDeleteRequest, ...grpc.CallOption) (*v1.TenantResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantDeleteRequest, ...grpc.CallOption) *v1.TenantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, in, opts
func (_m *TenantServiceClient) Find(ctx context.Context, in *v1.TenantFindRequest, opts ...grpc.CallOption) (*v1.TenantListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *v1.TenantListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantFindRequest, ...grpc.CallOption) (*v1.TenantListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantFindRequest, ...grpc.CallOption) *v1.TenantListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantFindRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, in, opts
func (_m *TenantServiceClient) Get(ctx context.Context, in *v1.TenantGetRequest, opts ...grpc.CallOption) (*v1.TenantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantGetRequest, ...grpc.CallOption) (*v1.TenantResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantGetRequest, ...grpc.CallOption) *v1.TenantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantGetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistory provides a mock function with given fields: ctx, in, opts
func (_m *TenantServiceClient) GetHistory(ctx context.Context, in *v1.TenantGetHistoryRequest, opts ...grpc.CallOption) (*v1.TenantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantGetHistoryRequest, ...grpc.CallOption) (*v1.TenantResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantGetHistoryRequest, ...grpc.CallOption) *v1.TenantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantGetHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectsFromMemberships provides a mock function with given fields: ctx, in, opts
func (_m *TenantServiceClient) ProjectsFromMemberships(ctx context.Context, in *v1.ProjectsFromMembershipsRequest, opts ...grpc.CallOption) (*v1.ProjectsFromMembershipsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProjectsFromMemberships")
	}

	var r0 *v1.ProjectsFromMembershipsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ProjectsFromMembershipsRequest, ...grpc.CallOption) (*v1.ProjectsFromMembershipsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ProjectsFromMembershipsRequest, ...grpc.CallOption) *v1.ProjectsFromMembershipsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectsFromMembershipsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ProjectsFromMembershipsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TenantsFromMemberships provides a mock function with given fields: ctx, in, opts
func (_m *TenantServiceClient) TenantsFromMemberships(ctx context.Context, in *v1.TenantsFromMembershipsRequest, opts ...grpc.CallOption) (*v1.TenantsFromMembershipsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TenantsFromMemberships")
	}

	var r0 *v1.TenantsFromMembershipsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantsFromMembershipsRequest, ...grpc.CallOption) (*v1.TenantsFromMembershipsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantsFromMembershipsRequest, ...grpc.CallOption) *v1.TenantsFromMembershipsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantsFromMembershipsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantsFromMembershipsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in, opts
func (_m *TenantServiceClient) Update(ctx context.Context, in *v1.TenantUpdateRequest, opts ...grpc.CallOption) (*v1.TenantResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantUpdateRequest, ...grpc.CallOption) (*v1.TenantResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantUpdateRequest, ...grpc.CallOption) *v1.TenantResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTenantServiceClient creates a new instance of TenantServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenantServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenantServiceClient {
	mock := &TenantServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
