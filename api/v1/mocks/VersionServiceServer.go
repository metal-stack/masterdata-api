// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// VersionServiceServer is an autogenerated mock type for the VersionServiceServer type
type VersionServiceServer struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *VersionServiceServer) Get(_a0 context.Context, _a1 *v1.GetVersionRequest) (*v1.GetVersionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.GetVersionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetVersionRequest) (*v1.GetVersionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.GetVersionRequest) *v1.GetVersionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetVersionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.GetVersionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVersionServiceServer creates a new instance of VersionServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVersionServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *VersionServiceServer {
	mock := &VersionServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
