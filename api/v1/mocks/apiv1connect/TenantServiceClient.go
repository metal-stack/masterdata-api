// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	apiv1 "github.com/metal-stack/masterdata-api/api/v1"

	connect "connectrpc.com/connect"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TenantServiceClient is an autogenerated mock type for the TenantServiceClient type
type TenantServiceClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceClient) Create(_a0 context.Context, _a1 *connect.Request[apiv1.TenantCreateRequest]) (*connect.Response[apiv1.TenantResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *connect.Response[apiv1.TenantResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantCreateRequest]) (*connect.Response[apiv1.TenantResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantCreateRequest]) *connect.Response[apiv1.TenantResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantCreateRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceClient) Delete(_a0 context.Context, _a1 *connect.Request[apiv1.TenantDeleteRequest]) (*connect.Response[apiv1.TenantResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *connect.Response[apiv1.TenantResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantDeleteRequest]) (*connect.Response[apiv1.TenantResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantDeleteRequest]) *connect.Response[apiv1.TenantResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantDeleteRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceClient) Find(_a0 context.Context, _a1 *connect.Request[apiv1.TenantFindRequest]) (*connect.Response[apiv1.TenantListResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *connect.Response[apiv1.TenantListResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantFindRequest]) (*connect.Response[apiv1.TenantListResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantFindRequest]) *connect.Response[apiv1.TenantListResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantListResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantFindRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindParticipatingProjects provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceClient) FindParticipatingProjects(_a0 context.Context, _a1 *connect.Request[apiv1.FindParticipatingProjectsRequest]) (*connect.Response[apiv1.FindParticipatingProjectsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindParticipatingProjects")
	}

	var r0 *connect.Response[apiv1.FindParticipatingProjectsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.FindParticipatingProjectsRequest]) (*connect.Response[apiv1.FindParticipatingProjectsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.FindParticipatingProjectsRequest]) *connect.Response[apiv1.FindParticipatingProjectsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.FindParticipatingProjectsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.FindParticipatingProjectsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindParticipatingTenants provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceClient) FindParticipatingTenants(_a0 context.Context, _a1 *connect.Request[apiv1.FindParticipatingTenantsRequest]) (*connect.Response[apiv1.FindParticipatingTenantsResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindParticipatingTenants")
	}

	var r0 *connect.Response[apiv1.FindParticipatingTenantsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.FindParticipatingTenantsRequest]) (*connect.Response[apiv1.FindParticipatingTenantsResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.FindParticipatingTenantsRequest]) *connect.Response[apiv1.FindParticipatingTenantsResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.FindParticipatingTenantsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.FindParticipatingTenantsRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceClient) Get(_a0 context.Context, _a1 *connect.Request[apiv1.TenantGetRequest]) (*connect.Response[apiv1.TenantResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[apiv1.TenantResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantGetRequest]) (*connect.Response[apiv1.TenantResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantGetRequest]) *connect.Response[apiv1.TenantResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantGetRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistory provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceClient) GetHistory(_a0 context.Context, _a1 *connect.Request[apiv1.TenantGetHistoryRequest]) (*connect.Response[apiv1.TenantResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 *connect.Response[apiv1.TenantResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantGetHistoryRequest]) (*connect.Response[apiv1.TenantResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantGetHistoryRequest]) *connect.Response[apiv1.TenantResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantGetHistoryRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTenantMembers provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceClient) ListTenantMembers(_a0 context.Context, _a1 *connect.Request[apiv1.ListTenantMembersRequest]) (*connect.Response[apiv1.ListTenantMembersResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ListTenantMembers")
	}

	var r0 *connect.Response[apiv1.ListTenantMembersResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ListTenantMembersRequest]) (*connect.Response[apiv1.ListTenantMembersResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ListTenantMembersRequest]) *connect.Response[apiv1.ListTenantMembersResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ListTenantMembersResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ListTenantMembersRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *TenantServiceClient) Update(_a0 context.Context, _a1 *connect.Request[apiv1.TenantUpdateRequest]) (*connect.Response[apiv1.TenantResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *connect.Response[apiv1.TenantResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantUpdateRequest]) (*connect.Response[apiv1.TenantResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantUpdateRequest]) *connect.Response[apiv1.TenantResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantUpdateRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTenantServiceClient creates a new instance of TenantServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenantServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenantServiceClient {
	mock := &TenantServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
