// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	apiv1 "github.com/metal-stack/masterdata-api/api/v1"

	connect "connectrpc.com/connect"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProjectMemberServiceClient is an autogenerated mock type for the ProjectMemberServiceClient type
type ProjectMemberServiceClient struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *ProjectMemberServiceClient) Create(_a0 context.Context, _a1 *connect.Request[apiv1.ProjectMemberCreateRequest]) (*connect.Response[apiv1.ProjectMemberResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *connect.Response[apiv1.ProjectMemberResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectMemberCreateRequest]) (*connect.Response[apiv1.ProjectMemberResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectMemberCreateRequest]) *connect.Response[apiv1.ProjectMemberResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ProjectMemberResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectMemberCreateRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *ProjectMemberServiceClient) Delete(_a0 context.Context, _a1 *connect.Request[apiv1.ProjectMemberDeleteRequest]) (*connect.Response[apiv1.ProjectMemberResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *connect.Response[apiv1.ProjectMemberResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectMemberDeleteRequest]) (*connect.Response[apiv1.ProjectMemberResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectMemberDeleteRequest]) *connect.Response[apiv1.ProjectMemberResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ProjectMemberResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectMemberDeleteRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *ProjectMemberServiceClient) Find(_a0 context.Context, _a1 *connect.Request[apiv1.ProjectMemberFindRequest]) (*connect.Response[apiv1.ProjectMemberListResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *connect.Response[apiv1.ProjectMemberListResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectMemberFindRequest]) (*connect.Response[apiv1.ProjectMemberListResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectMemberFindRequest]) *connect.Response[apiv1.ProjectMemberListResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ProjectMemberListResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectMemberFindRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *ProjectMemberServiceClient) Get(_a0 context.Context, _a1 *connect.Request[apiv1.ProjectMemberGetRequest]) (*connect.Response[apiv1.ProjectMemberResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[apiv1.ProjectMemberResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectMemberGetRequest]) (*connect.Response[apiv1.ProjectMemberResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectMemberGetRequest]) *connect.Response[apiv1.ProjectMemberResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ProjectMemberResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectMemberGetRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *ProjectMemberServiceClient) Update(_a0 context.Context, _a1 *connect.Request[apiv1.ProjectMemberUpdateRequest]) (*connect.Response[apiv1.ProjectMemberResponse], error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *connect.Response[apiv1.ProjectMemberResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectMemberUpdateRequest]) (*connect.Response[apiv1.ProjectMemberResponse], error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectMemberUpdateRequest]) *connect.Response[apiv1.ProjectMemberResponse]); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ProjectMemberResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectMemberUpdateRequest]) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProjectMemberServiceClient creates a new instance of ProjectMemberServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectMemberServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectMemberServiceClient {
	mock := &ProjectMemberServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
