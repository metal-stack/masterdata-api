// Code generated by mockery v2.50.4. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// TenantMemberServiceServer is an autogenerated mock type for the TenantMemberServiceServer type
type TenantMemberServiceServer struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *TenantMemberServiceServer) Create(_a0 context.Context, _a1 *v1.TenantMemberCreateRequest) (*v1.TenantMemberResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.TenantMemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberCreateRequest) (*v1.TenantMemberResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberCreateRequest) *v1.TenantMemberResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantMemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantMemberCreateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *TenantMemberServiceServer) Delete(_a0 context.Context, _a1 *v1.TenantMemberDeleteRequest) (*v1.TenantMemberResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.TenantMemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberDeleteRequest) (*v1.TenantMemberResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberDeleteRequest) *v1.TenantMemberResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantMemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantMemberDeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: _a0, _a1
func (_m *TenantMemberServiceServer) Find(_a0 context.Context, _a1 *v1.TenantMemberFindRequest) (*v1.TenantMemberListResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *v1.TenantMemberListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberFindRequest) (*v1.TenantMemberListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberFindRequest) *v1.TenantMemberListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantMemberListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantMemberFindRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *TenantMemberServiceServer) Get(_a0 context.Context, _a1 *v1.TenantMemberGetRequest) (*v1.TenantMemberResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.TenantMemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberGetRequest) (*v1.TenantMemberResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberGetRequest) *v1.TenantMemberResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantMemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantMemberGetRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *TenantMemberServiceServer) Update(_a0 context.Context, _a1 *v1.TenantMemberUpdateRequest) (*v1.TenantMemberResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.TenantMemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberUpdateRequest) (*v1.TenantMemberResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberUpdateRequest) *v1.TenantMemberResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantMemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.TenantMemberUpdateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTenantMemberServiceServer creates a new instance of TenantMemberServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenantMemberServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenantMemberServiceServer {
	mock := &TenantMemberServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
