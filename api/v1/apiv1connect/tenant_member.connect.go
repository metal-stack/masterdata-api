// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/tenant_member.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/metal-stack/masterdata-api/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TenantMemberServiceName is the fully-qualified name of the TenantMemberService service.
	TenantMemberServiceName = "api.v1.TenantMemberService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TenantMemberServiceCreateProcedure is the fully-qualified name of the TenantMemberService's
	// Create RPC.
	TenantMemberServiceCreateProcedure = "/api.v1.TenantMemberService/Create"
	// TenantMemberServiceUpdateProcedure is the fully-qualified name of the TenantMemberService's
	// Update RPC.
	TenantMemberServiceUpdateProcedure = "/api.v1.TenantMemberService/Update"
	// TenantMemberServiceDeleteProcedure is the fully-qualified name of the TenantMemberService's
	// Delete RPC.
	TenantMemberServiceDeleteProcedure = "/api.v1.TenantMemberService/Delete"
	// TenantMemberServiceGetProcedure is the fully-qualified name of the TenantMemberService's Get RPC.
	TenantMemberServiceGetProcedure = "/api.v1.TenantMemberService/Get"
	// TenantMemberServiceFindProcedure is the fully-qualified name of the TenantMemberService's Find
	// RPC.
	TenantMemberServiceFindProcedure = "/api.v1.TenantMemberService/Find"
)

// TenantMemberServiceClient is a client for the api.v1.TenantMemberService service.
type TenantMemberServiceClient interface {
	Create(context.Context, *connect.Request[v1.TenantMemberCreateRequest]) (*connect.Response[v1.TenantMemberResponse], error)
	Update(context.Context, *connect.Request[v1.TenantMemberUpdateRequest]) (*connect.Response[v1.TenantMemberResponse], error)
	Delete(context.Context, *connect.Request[v1.TenantMemberDeleteRequest]) (*connect.Response[v1.TenantMemberResponse], error)
	Get(context.Context, *connect.Request[v1.TenantMemberGetRequest]) (*connect.Response[v1.TenantMemberResponse], error)
	Find(context.Context, *connect.Request[v1.TenantMemberFindRequest]) (*connect.Response[v1.TenantMemberListResponse], error)
}

// NewTenantMemberServiceClient constructs a client for the api.v1.TenantMemberService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantMemberServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TenantMemberServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tenantMemberServiceMethods := v1.File_api_v1_tenant_member_proto.Services().ByName("TenantMemberService").Methods()
	return &tenantMemberServiceClient{
		create: connect.NewClient[v1.TenantMemberCreateRequest, v1.TenantMemberResponse](
			httpClient,
			baseURL+TenantMemberServiceCreateProcedure,
			connect.WithSchema(tenantMemberServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.TenantMemberUpdateRequest, v1.TenantMemberResponse](
			httpClient,
			baseURL+TenantMemberServiceUpdateProcedure,
			connect.WithSchema(tenantMemberServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.TenantMemberDeleteRequest, v1.TenantMemberResponse](
			httpClient,
			baseURL+TenantMemberServiceDeleteProcedure,
			connect.WithSchema(tenantMemberServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.TenantMemberGetRequest, v1.TenantMemberResponse](
			httpClient,
			baseURL+TenantMemberServiceGetProcedure,
			connect.WithSchema(tenantMemberServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		find: connect.NewClient[v1.TenantMemberFindRequest, v1.TenantMemberListResponse](
			httpClient,
			baseURL+TenantMemberServiceFindProcedure,
			connect.WithSchema(tenantMemberServiceMethods.ByName("Find")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tenantMemberServiceClient implements TenantMemberServiceClient.
type tenantMemberServiceClient struct {
	create *connect.Client[v1.TenantMemberCreateRequest, v1.TenantMemberResponse]
	update *connect.Client[v1.TenantMemberUpdateRequest, v1.TenantMemberResponse]
	delete *connect.Client[v1.TenantMemberDeleteRequest, v1.TenantMemberResponse]
	get    *connect.Client[v1.TenantMemberGetRequest, v1.TenantMemberResponse]
	find   *connect.Client[v1.TenantMemberFindRequest, v1.TenantMemberListResponse]
}

// Create calls api.v1.TenantMemberService.Create.
func (c *tenantMemberServiceClient) Create(ctx context.Context, req *connect.Request[v1.TenantMemberCreateRequest]) (*connect.Response[v1.TenantMemberResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls api.v1.TenantMemberService.Update.
func (c *tenantMemberServiceClient) Update(ctx context.Context, req *connect.Request[v1.TenantMemberUpdateRequest]) (*connect.Response[v1.TenantMemberResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls api.v1.TenantMemberService.Delete.
func (c *tenantMemberServiceClient) Delete(ctx context.Context, req *connect.Request[v1.TenantMemberDeleteRequest]) (*connect.Response[v1.TenantMemberResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Get calls api.v1.TenantMemberService.Get.
func (c *tenantMemberServiceClient) Get(ctx context.Context, req *connect.Request[v1.TenantMemberGetRequest]) (*connect.Response[v1.TenantMemberResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Find calls api.v1.TenantMemberService.Find.
func (c *tenantMemberServiceClient) Find(ctx context.Context, req *connect.Request[v1.TenantMemberFindRequest]) (*connect.Response[v1.TenantMemberListResponse], error) {
	return c.find.CallUnary(ctx, req)
}

// TenantMemberServiceHandler is an implementation of the api.v1.TenantMemberService service.
type TenantMemberServiceHandler interface {
	Create(context.Context, *connect.Request[v1.TenantMemberCreateRequest]) (*connect.Response[v1.TenantMemberResponse], error)
	Update(context.Context, *connect.Request[v1.TenantMemberUpdateRequest]) (*connect.Response[v1.TenantMemberResponse], error)
	Delete(context.Context, *connect.Request[v1.TenantMemberDeleteRequest]) (*connect.Response[v1.TenantMemberResponse], error)
	Get(context.Context, *connect.Request[v1.TenantMemberGetRequest]) (*connect.Response[v1.TenantMemberResponse], error)
	Find(context.Context, *connect.Request[v1.TenantMemberFindRequest]) (*connect.Response[v1.TenantMemberListResponse], error)
}

// NewTenantMemberServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantMemberServiceHandler(svc TenantMemberServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tenantMemberServiceMethods := v1.File_api_v1_tenant_member_proto.Services().ByName("TenantMemberService").Methods()
	tenantMemberServiceCreateHandler := connect.NewUnaryHandler(
		TenantMemberServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(tenantMemberServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	tenantMemberServiceUpdateHandler := connect.NewUnaryHandler(
		TenantMemberServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(tenantMemberServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	tenantMemberServiceDeleteHandler := connect.NewUnaryHandler(
		TenantMemberServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(tenantMemberServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	tenantMemberServiceGetHandler := connect.NewUnaryHandler(
		TenantMemberServiceGetProcedure,
		svc.Get,
		connect.WithSchema(tenantMemberServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	tenantMemberServiceFindHandler := connect.NewUnaryHandler(
		TenantMemberServiceFindProcedure,
		svc.Find,
		connect.WithSchema(tenantMemberServiceMethods.ByName("Find")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.TenantMemberService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TenantMemberServiceCreateProcedure:
			tenantMemberServiceCreateHandler.ServeHTTP(w, r)
		case TenantMemberServiceUpdateProcedure:
			tenantMemberServiceUpdateHandler.ServeHTTP(w, r)
		case TenantMemberServiceDeleteProcedure:
			tenantMemberServiceDeleteHandler.ServeHTTP(w, r)
		case TenantMemberServiceGetProcedure:
			tenantMemberServiceGetHandler.ServeHTTP(w, r)
		case TenantMemberServiceFindProcedure:
			tenantMemberServiceFindHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTenantMemberServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantMemberServiceHandler struct{}

func (UnimplementedTenantMemberServiceHandler) Create(context.Context, *connect.Request[v1.TenantMemberCreateRequest]) (*connect.Response[v1.TenantMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantMemberService.Create is not implemented"))
}

func (UnimplementedTenantMemberServiceHandler) Update(context.Context, *connect.Request[v1.TenantMemberUpdateRequest]) (*connect.Response[v1.TenantMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantMemberService.Update is not implemented"))
}

func (UnimplementedTenantMemberServiceHandler) Delete(context.Context, *connect.Request[v1.TenantMemberDeleteRequest]) (*connect.Response[v1.TenantMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantMemberService.Delete is not implemented"))
}

func (UnimplementedTenantMemberServiceHandler) Get(context.Context, *connect.Request[v1.TenantMemberGetRequest]) (*connect.Response[v1.TenantMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantMemberService.Get is not implemented"))
}

func (UnimplementedTenantMemberServiceHandler) Find(context.Context, *connect.Request[v1.TenantMemberFindRequest]) (*connect.Response[v1.TenantMemberListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantMemberService.Find is not implemented"))
}
