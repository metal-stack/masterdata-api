// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/project_member.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/metal-stack/masterdata-api/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProjectMemberServiceName is the fully-qualified name of the ProjectMemberService service.
	ProjectMemberServiceName = "api.v1.ProjectMemberService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectMemberServiceCreateProcedure is the fully-qualified name of the ProjectMemberService's
	// Create RPC.
	ProjectMemberServiceCreateProcedure = "/api.v1.ProjectMemberService/Create"
	// ProjectMemberServiceUpdateProcedure is the fully-qualified name of the ProjectMemberService's
	// Update RPC.
	ProjectMemberServiceUpdateProcedure = "/api.v1.ProjectMemberService/Update"
	// ProjectMemberServiceDeleteProcedure is the fully-qualified name of the ProjectMemberService's
	// Delete RPC.
	ProjectMemberServiceDeleteProcedure = "/api.v1.ProjectMemberService/Delete"
	// ProjectMemberServiceGetProcedure is the fully-qualified name of the ProjectMemberService's Get
	// RPC.
	ProjectMemberServiceGetProcedure = "/api.v1.ProjectMemberService/Get"
	// ProjectMemberServiceFindProcedure is the fully-qualified name of the ProjectMemberService's Find
	// RPC.
	ProjectMemberServiceFindProcedure = "/api.v1.ProjectMemberService/Find"
)

// ProjectMemberServiceClient is a client for the api.v1.ProjectMemberService service.
type ProjectMemberServiceClient interface {
	Create(context.Context, *connect.Request[v1.ProjectMemberCreateRequest]) (*connect.Response[v1.ProjectMemberResponse], error)
	Update(context.Context, *connect.Request[v1.ProjectMemberUpdateRequest]) (*connect.Response[v1.ProjectMemberResponse], error)
	Delete(context.Context, *connect.Request[v1.ProjectMemberDeleteRequest]) (*connect.Response[v1.ProjectMemberResponse], error)
	Get(context.Context, *connect.Request[v1.ProjectMemberGetRequest]) (*connect.Response[v1.ProjectMemberResponse], error)
	Find(context.Context, *connect.Request[v1.ProjectMemberFindRequest]) (*connect.Response[v1.ProjectMemberListResponse], error)
}

// NewProjectMemberServiceClient constructs a client for the api.v1.ProjectMemberService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectMemberServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProjectMemberServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	projectMemberServiceMethods := v1.File_api_v1_project_member_proto.Services().ByName("ProjectMemberService").Methods()
	return &projectMemberServiceClient{
		create: connect.NewClient[v1.ProjectMemberCreateRequest, v1.ProjectMemberResponse](
			httpClient,
			baseURL+ProjectMemberServiceCreateProcedure,
			connect.WithSchema(projectMemberServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.ProjectMemberUpdateRequest, v1.ProjectMemberResponse](
			httpClient,
			baseURL+ProjectMemberServiceUpdateProcedure,
			connect.WithSchema(projectMemberServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.ProjectMemberDeleteRequest, v1.ProjectMemberResponse](
			httpClient,
			baseURL+ProjectMemberServiceDeleteProcedure,
			connect.WithSchema(projectMemberServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.ProjectMemberGetRequest, v1.ProjectMemberResponse](
			httpClient,
			baseURL+ProjectMemberServiceGetProcedure,
			connect.WithSchema(projectMemberServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		find: connect.NewClient[v1.ProjectMemberFindRequest, v1.ProjectMemberListResponse](
			httpClient,
			baseURL+ProjectMemberServiceFindProcedure,
			connect.WithSchema(projectMemberServiceMethods.ByName("Find")),
			connect.WithClientOptions(opts...),
		),
	}
}

// projectMemberServiceClient implements ProjectMemberServiceClient.
type projectMemberServiceClient struct {
	create *connect.Client[v1.ProjectMemberCreateRequest, v1.ProjectMemberResponse]
	update *connect.Client[v1.ProjectMemberUpdateRequest, v1.ProjectMemberResponse]
	delete *connect.Client[v1.ProjectMemberDeleteRequest, v1.ProjectMemberResponse]
	get    *connect.Client[v1.ProjectMemberGetRequest, v1.ProjectMemberResponse]
	find   *connect.Client[v1.ProjectMemberFindRequest, v1.ProjectMemberListResponse]
}

// Create calls api.v1.ProjectMemberService.Create.
func (c *projectMemberServiceClient) Create(ctx context.Context, req *connect.Request[v1.ProjectMemberCreateRequest]) (*connect.Response[v1.ProjectMemberResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls api.v1.ProjectMemberService.Update.
func (c *projectMemberServiceClient) Update(ctx context.Context, req *connect.Request[v1.ProjectMemberUpdateRequest]) (*connect.Response[v1.ProjectMemberResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls api.v1.ProjectMemberService.Delete.
func (c *projectMemberServiceClient) Delete(ctx context.Context, req *connect.Request[v1.ProjectMemberDeleteRequest]) (*connect.Response[v1.ProjectMemberResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Get calls api.v1.ProjectMemberService.Get.
func (c *projectMemberServiceClient) Get(ctx context.Context, req *connect.Request[v1.ProjectMemberGetRequest]) (*connect.Response[v1.ProjectMemberResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Find calls api.v1.ProjectMemberService.Find.
func (c *projectMemberServiceClient) Find(ctx context.Context, req *connect.Request[v1.ProjectMemberFindRequest]) (*connect.Response[v1.ProjectMemberListResponse], error) {
	return c.find.CallUnary(ctx, req)
}

// ProjectMemberServiceHandler is an implementation of the api.v1.ProjectMemberService service.
type ProjectMemberServiceHandler interface {
	Create(context.Context, *connect.Request[v1.ProjectMemberCreateRequest]) (*connect.Response[v1.ProjectMemberResponse], error)
	Update(context.Context, *connect.Request[v1.ProjectMemberUpdateRequest]) (*connect.Response[v1.ProjectMemberResponse], error)
	Delete(context.Context, *connect.Request[v1.ProjectMemberDeleteRequest]) (*connect.Response[v1.ProjectMemberResponse], error)
	Get(context.Context, *connect.Request[v1.ProjectMemberGetRequest]) (*connect.Response[v1.ProjectMemberResponse], error)
	Find(context.Context, *connect.Request[v1.ProjectMemberFindRequest]) (*connect.Response[v1.ProjectMemberListResponse], error)
}

// NewProjectMemberServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectMemberServiceHandler(svc ProjectMemberServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	projectMemberServiceMethods := v1.File_api_v1_project_member_proto.Services().ByName("ProjectMemberService").Methods()
	projectMemberServiceCreateHandler := connect.NewUnaryHandler(
		ProjectMemberServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(projectMemberServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	projectMemberServiceUpdateHandler := connect.NewUnaryHandler(
		ProjectMemberServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(projectMemberServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	projectMemberServiceDeleteHandler := connect.NewUnaryHandler(
		ProjectMemberServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(projectMemberServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	projectMemberServiceGetHandler := connect.NewUnaryHandler(
		ProjectMemberServiceGetProcedure,
		svc.Get,
		connect.WithSchema(projectMemberServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	projectMemberServiceFindHandler := connect.NewUnaryHandler(
		ProjectMemberServiceFindProcedure,
		svc.Find,
		connect.WithSchema(projectMemberServiceMethods.ByName("Find")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.ProjectMemberService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectMemberServiceCreateProcedure:
			projectMemberServiceCreateHandler.ServeHTTP(w, r)
		case ProjectMemberServiceUpdateProcedure:
			projectMemberServiceUpdateHandler.ServeHTTP(w, r)
		case ProjectMemberServiceDeleteProcedure:
			projectMemberServiceDeleteHandler.ServeHTTP(w, r)
		case ProjectMemberServiceGetProcedure:
			projectMemberServiceGetHandler.ServeHTTP(w, r)
		case ProjectMemberServiceFindProcedure:
			projectMemberServiceFindHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectMemberServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectMemberServiceHandler struct{}

func (UnimplementedProjectMemberServiceHandler) Create(context.Context, *connect.Request[v1.ProjectMemberCreateRequest]) (*connect.Response[v1.ProjectMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProjectMemberService.Create is not implemented"))
}

func (UnimplementedProjectMemberServiceHandler) Update(context.Context, *connect.Request[v1.ProjectMemberUpdateRequest]) (*connect.Response[v1.ProjectMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProjectMemberService.Update is not implemented"))
}

func (UnimplementedProjectMemberServiceHandler) Delete(context.Context, *connect.Request[v1.ProjectMemberDeleteRequest]) (*connect.Response[v1.ProjectMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProjectMemberService.Delete is not implemented"))
}

func (UnimplementedProjectMemberServiceHandler) Get(context.Context, *connect.Request[v1.ProjectMemberGetRequest]) (*connect.Response[v1.ProjectMemberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProjectMemberService.Get is not implemented"))
}

func (UnimplementedProjectMemberServiceHandler) Find(context.Context, *connect.Request[v1.ProjectMemberFindRequest]) (*connect.Response[v1.ProjectMemberListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.ProjectMemberService.Find is not implemented"))
}
