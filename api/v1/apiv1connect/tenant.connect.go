// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/tenant.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/metal-stack/masterdata-api/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TenantServiceName is the fully-qualified name of the TenantService service.
	TenantServiceName = "api.v1.TenantService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TenantServiceCreateProcedure is the fully-qualified name of the TenantService's Create RPC.
	TenantServiceCreateProcedure = "/api.v1.TenantService/Create"
	// TenantServiceUpdateProcedure is the fully-qualified name of the TenantService's Update RPC.
	TenantServiceUpdateProcedure = "/api.v1.TenantService/Update"
	// TenantServiceDeleteProcedure is the fully-qualified name of the TenantService's Delete RPC.
	TenantServiceDeleteProcedure = "/api.v1.TenantService/Delete"
	// TenantServiceGetProcedure is the fully-qualified name of the TenantService's Get RPC.
	TenantServiceGetProcedure = "/api.v1.TenantService/Get"
	// TenantServiceGetHistoryProcedure is the fully-qualified name of the TenantService's GetHistory
	// RPC.
	TenantServiceGetHistoryProcedure = "/api.v1.TenantService/GetHistory"
	// TenantServiceFindProcedure is the fully-qualified name of the TenantService's Find RPC.
	TenantServiceFindProcedure = "/api.v1.TenantService/Find"
	// TenantServiceListTenantMembersProcedure is the fully-qualified name of the TenantService's
	// ListTenantMembers RPC.
	TenantServiceListTenantMembersProcedure = "/api.v1.TenantService/ListTenantMembers"
	// TenantServiceFindParticipatingProjectsProcedure is the fully-qualified name of the
	// TenantService's FindParticipatingProjects RPC.
	TenantServiceFindParticipatingProjectsProcedure = "/api.v1.TenantService/FindParticipatingProjects"
	// TenantServiceFindParticipatingTenantsProcedure is the fully-qualified name of the TenantService's
	// FindParticipatingTenants RPC.
	TenantServiceFindParticipatingTenantsProcedure = "/api.v1.TenantService/FindParticipatingTenants"
)

// TenantServiceClient is a client for the api.v1.TenantService service.
type TenantServiceClient interface {
	Create(context.Context, *connect.Request[v1.TenantCreateRequest]) (*connect.Response[v1.TenantResponse], error)
	Update(context.Context, *connect.Request[v1.TenantUpdateRequest]) (*connect.Response[v1.TenantResponse], error)
	Delete(context.Context, *connect.Request[v1.TenantDeleteRequest]) (*connect.Response[v1.TenantResponse], error)
	Get(context.Context, *connect.Request[v1.TenantGetRequest]) (*connect.Response[v1.TenantResponse], error)
	GetHistory(context.Context, *connect.Request[v1.TenantGetHistoryRequest]) (*connect.Response[v1.TenantResponse], error)
	Find(context.Context, *connect.Request[v1.TenantFindRequest]) (*connect.Response[v1.TenantListResponse], error)
	ListTenantMembers(context.Context, *connect.Request[v1.ListTenantMembersRequest]) (*connect.Response[v1.ListTenantMembersResponse], error)
	FindParticipatingProjects(context.Context, *connect.Request[v1.FindParticipatingProjectsRequest]) (*connect.Response[v1.FindParticipatingProjectsResponse], error)
	FindParticipatingTenants(context.Context, *connect.Request[v1.FindParticipatingTenantsRequest]) (*connect.Response[v1.FindParticipatingTenantsResponse], error)
}

// NewTenantServiceClient constructs a client for the api.v1.TenantService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTenantServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TenantServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	tenantServiceMethods := v1.File_api_v1_tenant_proto.Services().ByName("TenantService").Methods()
	return &tenantServiceClient{
		create: connect.NewClient[v1.TenantCreateRequest, v1.TenantResponse](
			httpClient,
			baseURL+TenantServiceCreateProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("Create")),
			connect.WithClientOptions(opts...),
		),
		update: connect.NewClient[v1.TenantUpdateRequest, v1.TenantResponse](
			httpClient,
			baseURL+TenantServiceUpdateProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("Update")),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.TenantDeleteRequest, v1.TenantResponse](
			httpClient,
			baseURL+TenantServiceDeleteProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("Delete")),
			connect.WithClientOptions(opts...),
		),
		get: connect.NewClient[v1.TenantGetRequest, v1.TenantResponse](
			httpClient,
			baseURL+TenantServiceGetProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("Get")),
			connect.WithClientOptions(opts...),
		),
		getHistory: connect.NewClient[v1.TenantGetHistoryRequest, v1.TenantResponse](
			httpClient,
			baseURL+TenantServiceGetHistoryProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("GetHistory")),
			connect.WithClientOptions(opts...),
		),
		find: connect.NewClient[v1.TenantFindRequest, v1.TenantListResponse](
			httpClient,
			baseURL+TenantServiceFindProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("Find")),
			connect.WithClientOptions(opts...),
		),
		listTenantMembers: connect.NewClient[v1.ListTenantMembersRequest, v1.ListTenantMembersResponse](
			httpClient,
			baseURL+TenantServiceListTenantMembersProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("ListTenantMembers")),
			connect.WithClientOptions(opts...),
		),
		findParticipatingProjects: connect.NewClient[v1.FindParticipatingProjectsRequest, v1.FindParticipatingProjectsResponse](
			httpClient,
			baseURL+TenantServiceFindParticipatingProjectsProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("FindParticipatingProjects")),
			connect.WithClientOptions(opts...),
		),
		findParticipatingTenants: connect.NewClient[v1.FindParticipatingTenantsRequest, v1.FindParticipatingTenantsResponse](
			httpClient,
			baseURL+TenantServiceFindParticipatingTenantsProcedure,
			connect.WithSchema(tenantServiceMethods.ByName("FindParticipatingTenants")),
			connect.WithClientOptions(opts...),
		),
	}
}

// tenantServiceClient implements TenantServiceClient.
type tenantServiceClient struct {
	create                    *connect.Client[v1.TenantCreateRequest, v1.TenantResponse]
	update                    *connect.Client[v1.TenantUpdateRequest, v1.TenantResponse]
	delete                    *connect.Client[v1.TenantDeleteRequest, v1.TenantResponse]
	get                       *connect.Client[v1.TenantGetRequest, v1.TenantResponse]
	getHistory                *connect.Client[v1.TenantGetHistoryRequest, v1.TenantResponse]
	find                      *connect.Client[v1.TenantFindRequest, v1.TenantListResponse]
	listTenantMembers         *connect.Client[v1.ListTenantMembersRequest, v1.ListTenantMembersResponse]
	findParticipatingProjects *connect.Client[v1.FindParticipatingProjectsRequest, v1.FindParticipatingProjectsResponse]
	findParticipatingTenants  *connect.Client[v1.FindParticipatingTenantsRequest, v1.FindParticipatingTenantsResponse]
}

// Create calls api.v1.TenantService.Create.
func (c *tenantServiceClient) Create(ctx context.Context, req *connect.Request[v1.TenantCreateRequest]) (*connect.Response[v1.TenantResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Update calls api.v1.TenantService.Update.
func (c *tenantServiceClient) Update(ctx context.Context, req *connect.Request[v1.TenantUpdateRequest]) (*connect.Response[v1.TenantResponse], error) {
	return c.update.CallUnary(ctx, req)
}

// Delete calls api.v1.TenantService.Delete.
func (c *tenantServiceClient) Delete(ctx context.Context, req *connect.Request[v1.TenantDeleteRequest]) (*connect.Response[v1.TenantResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Get calls api.v1.TenantService.Get.
func (c *tenantServiceClient) Get(ctx context.Context, req *connect.Request[v1.TenantGetRequest]) (*connect.Response[v1.TenantResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// GetHistory calls api.v1.TenantService.GetHistory.
func (c *tenantServiceClient) GetHistory(ctx context.Context, req *connect.Request[v1.TenantGetHistoryRequest]) (*connect.Response[v1.TenantResponse], error) {
	return c.getHistory.CallUnary(ctx, req)
}

// Find calls api.v1.TenantService.Find.
func (c *tenantServiceClient) Find(ctx context.Context, req *connect.Request[v1.TenantFindRequest]) (*connect.Response[v1.TenantListResponse], error) {
	return c.find.CallUnary(ctx, req)
}

// ListTenantMembers calls api.v1.TenantService.ListTenantMembers.
func (c *tenantServiceClient) ListTenantMembers(ctx context.Context, req *connect.Request[v1.ListTenantMembersRequest]) (*connect.Response[v1.ListTenantMembersResponse], error) {
	return c.listTenantMembers.CallUnary(ctx, req)
}

// FindParticipatingProjects calls api.v1.TenantService.FindParticipatingProjects.
func (c *tenantServiceClient) FindParticipatingProjects(ctx context.Context, req *connect.Request[v1.FindParticipatingProjectsRequest]) (*connect.Response[v1.FindParticipatingProjectsResponse], error) {
	return c.findParticipatingProjects.CallUnary(ctx, req)
}

// FindParticipatingTenants calls api.v1.TenantService.FindParticipatingTenants.
func (c *tenantServiceClient) FindParticipatingTenants(ctx context.Context, req *connect.Request[v1.FindParticipatingTenantsRequest]) (*connect.Response[v1.FindParticipatingTenantsResponse], error) {
	return c.findParticipatingTenants.CallUnary(ctx, req)
}

// TenantServiceHandler is an implementation of the api.v1.TenantService service.
type TenantServiceHandler interface {
	Create(context.Context, *connect.Request[v1.TenantCreateRequest]) (*connect.Response[v1.TenantResponse], error)
	Update(context.Context, *connect.Request[v1.TenantUpdateRequest]) (*connect.Response[v1.TenantResponse], error)
	Delete(context.Context, *connect.Request[v1.TenantDeleteRequest]) (*connect.Response[v1.TenantResponse], error)
	Get(context.Context, *connect.Request[v1.TenantGetRequest]) (*connect.Response[v1.TenantResponse], error)
	GetHistory(context.Context, *connect.Request[v1.TenantGetHistoryRequest]) (*connect.Response[v1.TenantResponse], error)
	Find(context.Context, *connect.Request[v1.TenantFindRequest]) (*connect.Response[v1.TenantListResponse], error)
	ListTenantMembers(context.Context, *connect.Request[v1.ListTenantMembersRequest]) (*connect.Response[v1.ListTenantMembersResponse], error)
	FindParticipatingProjects(context.Context, *connect.Request[v1.FindParticipatingProjectsRequest]) (*connect.Response[v1.FindParticipatingProjectsResponse], error)
	FindParticipatingTenants(context.Context, *connect.Request[v1.FindParticipatingTenantsRequest]) (*connect.Response[v1.FindParticipatingTenantsResponse], error)
}

// NewTenantServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTenantServiceHandler(svc TenantServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tenantServiceMethods := v1.File_api_v1_tenant_proto.Services().ByName("TenantService").Methods()
	tenantServiceCreateHandler := connect.NewUnaryHandler(
		TenantServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(tenantServiceMethods.ByName("Create")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceUpdateHandler := connect.NewUnaryHandler(
		TenantServiceUpdateProcedure,
		svc.Update,
		connect.WithSchema(tenantServiceMethods.ByName("Update")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceDeleteHandler := connect.NewUnaryHandler(
		TenantServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(tenantServiceMethods.ByName("Delete")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceGetHandler := connect.NewUnaryHandler(
		TenantServiceGetProcedure,
		svc.Get,
		connect.WithSchema(tenantServiceMethods.ByName("Get")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceGetHistoryHandler := connect.NewUnaryHandler(
		TenantServiceGetHistoryProcedure,
		svc.GetHistory,
		connect.WithSchema(tenantServiceMethods.ByName("GetHistory")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceFindHandler := connect.NewUnaryHandler(
		TenantServiceFindProcedure,
		svc.Find,
		connect.WithSchema(tenantServiceMethods.ByName("Find")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceListTenantMembersHandler := connect.NewUnaryHandler(
		TenantServiceListTenantMembersProcedure,
		svc.ListTenantMembers,
		connect.WithSchema(tenantServiceMethods.ByName("ListTenantMembers")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceFindParticipatingProjectsHandler := connect.NewUnaryHandler(
		TenantServiceFindParticipatingProjectsProcedure,
		svc.FindParticipatingProjects,
		connect.WithSchema(tenantServiceMethods.ByName("FindParticipatingProjects")),
		connect.WithHandlerOptions(opts...),
	)
	tenantServiceFindParticipatingTenantsHandler := connect.NewUnaryHandler(
		TenantServiceFindParticipatingTenantsProcedure,
		svc.FindParticipatingTenants,
		connect.WithSchema(tenantServiceMethods.ByName("FindParticipatingTenants")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.TenantService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TenantServiceCreateProcedure:
			tenantServiceCreateHandler.ServeHTTP(w, r)
		case TenantServiceUpdateProcedure:
			tenantServiceUpdateHandler.ServeHTTP(w, r)
		case TenantServiceDeleteProcedure:
			tenantServiceDeleteHandler.ServeHTTP(w, r)
		case TenantServiceGetProcedure:
			tenantServiceGetHandler.ServeHTTP(w, r)
		case TenantServiceGetHistoryProcedure:
			tenantServiceGetHistoryHandler.ServeHTTP(w, r)
		case TenantServiceFindProcedure:
			tenantServiceFindHandler.ServeHTTP(w, r)
		case TenantServiceListTenantMembersProcedure:
			tenantServiceListTenantMembersHandler.ServeHTTP(w, r)
		case TenantServiceFindParticipatingProjectsProcedure:
			tenantServiceFindParticipatingProjectsHandler.ServeHTTP(w, r)
		case TenantServiceFindParticipatingTenantsProcedure:
			tenantServiceFindParticipatingTenantsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTenantServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTenantServiceHandler struct{}

func (UnimplementedTenantServiceHandler) Create(context.Context, *connect.Request[v1.TenantCreateRequest]) (*connect.Response[v1.TenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantService.Create is not implemented"))
}

func (UnimplementedTenantServiceHandler) Update(context.Context, *connect.Request[v1.TenantUpdateRequest]) (*connect.Response[v1.TenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantService.Update is not implemented"))
}

func (UnimplementedTenantServiceHandler) Delete(context.Context, *connect.Request[v1.TenantDeleteRequest]) (*connect.Response[v1.TenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantService.Delete is not implemented"))
}

func (UnimplementedTenantServiceHandler) Get(context.Context, *connect.Request[v1.TenantGetRequest]) (*connect.Response[v1.TenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantService.Get is not implemented"))
}

func (UnimplementedTenantServiceHandler) GetHistory(context.Context, *connect.Request[v1.TenantGetHistoryRequest]) (*connect.Response[v1.TenantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantService.GetHistory is not implemented"))
}

func (UnimplementedTenantServiceHandler) Find(context.Context, *connect.Request[v1.TenantFindRequest]) (*connect.Response[v1.TenantListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantService.Find is not implemented"))
}

func (UnimplementedTenantServiceHandler) ListTenantMembers(context.Context, *connect.Request[v1.ListTenantMembersRequest]) (*connect.Response[v1.ListTenantMembersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantService.ListTenantMembers is not implemented"))
}

func (UnimplementedTenantServiceHandler) FindParticipatingProjects(context.Context, *connect.Request[v1.FindParticipatingProjectsRequest]) (*connect.Response[v1.FindParticipatingProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantService.FindParticipatingProjects is not implemented"))
}

func (UnimplementedTenantServiceHandler) FindParticipatingTenants(context.Context, *connect.Request[v1.FindParticipatingTenantsRequest]) (*connect.Response[v1.FindParticipatingTenantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.TenantService.FindParticipatingTenants is not implemented"))
}
