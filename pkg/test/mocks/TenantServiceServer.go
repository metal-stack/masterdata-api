// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTenantServiceServer creates a new instance of MockTenantServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTenantServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTenantServiceServer {
	mock := &MockTenantServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTenantServiceServer is an autogenerated mock type for the TenantServiceServer type
type MockTenantServiceServer struct {
	mock.Mock
}

type MockTenantServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantServiceServer) EXPECT() *MockTenantServiceServer_Expecter {
	return &MockTenantServiceServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) Create(context1 context.Context, tenantCreateRequest *v1.TenantCreateRequest) (*v1.TenantResponse, error) {
	ret := _mock.Called(context1, tenantCreateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantCreateRequest) (*v1.TenantResponse, error)); ok {
		return returnFunc(context1, tenantCreateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantCreateRequest) *v1.TenantResponse); ok {
		r0 = returnFunc(context1, tenantCreateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TenantCreateRequest) error); ok {
		r1 = returnFunc(context1, tenantCreateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTenantServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - tenantCreateRequest *v1.TenantCreateRequest
func (_e *MockTenantServiceServer_Expecter) Create(context1 interface{}, tenantCreateRequest interface{}) *MockTenantServiceServer_Create_Call {
	return &MockTenantServiceServer_Create_Call{Call: _e.mock.On("Create", context1, tenantCreateRequest)}
}

func (_c *MockTenantServiceServer_Create_Call) Run(run func(context1 context.Context, tenantCreateRequest *v1.TenantCreateRequest)) *MockTenantServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TenantCreateRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TenantCreateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_Create_Call) Return(tenantResponse *v1.TenantResponse, err error) *MockTenantServiceServer_Create_Call {
	_c.Call.Return(tenantResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_Create_Call) RunAndReturn(run func(context1 context.Context, tenantCreateRequest *v1.TenantCreateRequest) (*v1.TenantResponse, error)) *MockTenantServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) Delete(context1 context.Context, tenantDeleteRequest *v1.TenantDeleteRequest) (*v1.TenantResponse, error) {
	ret := _mock.Called(context1, tenantDeleteRequest)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantDeleteRequest) (*v1.TenantResponse, error)); ok {
		return returnFunc(context1, tenantDeleteRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantDeleteRequest) *v1.TenantResponse); ok {
		r0 = returnFunc(context1, tenantDeleteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TenantDeleteRequest) error); ok {
		r1 = returnFunc(context1, tenantDeleteRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTenantServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - tenantDeleteRequest *v1.TenantDeleteRequest
func (_e *MockTenantServiceServer_Expecter) Delete(context1 interface{}, tenantDeleteRequest interface{}) *MockTenantServiceServer_Delete_Call {
	return &MockTenantServiceServer_Delete_Call{Call: _e.mock.On("Delete", context1, tenantDeleteRequest)}
}

func (_c *MockTenantServiceServer_Delete_Call) Run(run func(context1 context.Context, tenantDeleteRequest *v1.TenantDeleteRequest)) *MockTenantServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TenantDeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TenantDeleteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_Delete_Call) Return(tenantResponse *v1.TenantResponse, err error) *MockTenantServiceServer_Delete_Call {
	_c.Call.Return(tenantResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_Delete_Call) RunAndReturn(run func(context1 context.Context, tenantDeleteRequest *v1.TenantDeleteRequest) (*v1.TenantResponse, error)) *MockTenantServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) Find(context1 context.Context, tenantFindRequest *v1.TenantFindRequest) (*v1.TenantListResponse, error) {
	ret := _mock.Called(context1, tenantFindRequest)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *v1.TenantListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantFindRequest) (*v1.TenantListResponse, error)); ok {
		return returnFunc(context1, tenantFindRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantFindRequest) *v1.TenantListResponse); ok {
		r0 = returnFunc(context1, tenantFindRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TenantFindRequest) error); ok {
		r1 = returnFunc(context1, tenantFindRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockTenantServiceServer_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - context1 context.Context
//   - tenantFindRequest *v1.TenantFindRequest
func (_e *MockTenantServiceServer_Expecter) Find(context1 interface{}, tenantFindRequest interface{}) *MockTenantServiceServer_Find_Call {
	return &MockTenantServiceServer_Find_Call{Call: _e.mock.On("Find", context1, tenantFindRequest)}
}

func (_c *MockTenantServiceServer_Find_Call) Run(run func(context1 context.Context, tenantFindRequest *v1.TenantFindRequest)) *MockTenantServiceServer_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TenantFindRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TenantFindRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_Find_Call) Return(tenantListResponse *v1.TenantListResponse, err error) *MockTenantServiceServer_Find_Call {
	_c.Call.Return(tenantListResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_Find_Call) RunAndReturn(run func(context1 context.Context, tenantFindRequest *v1.TenantFindRequest) (*v1.TenantListResponse, error)) *MockTenantServiceServer_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindParticipatingProjects provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) FindParticipatingProjects(context1 context.Context, findParticipatingProjectsRequest *v1.FindParticipatingProjectsRequest) (*v1.FindParticipatingProjectsResponse, error) {
	ret := _mock.Called(context1, findParticipatingProjectsRequest)

	if len(ret) == 0 {
		panic("no return value specified for FindParticipatingProjects")
	}

	var r0 *v1.FindParticipatingProjectsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.FindParticipatingProjectsRequest) (*v1.FindParticipatingProjectsResponse, error)); ok {
		return returnFunc(context1, findParticipatingProjectsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.FindParticipatingProjectsRequest) *v1.FindParticipatingProjectsResponse); ok {
		r0 = returnFunc(context1, findParticipatingProjectsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.FindParticipatingProjectsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.FindParticipatingProjectsRequest) error); ok {
		r1 = returnFunc(context1, findParticipatingProjectsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_FindParticipatingProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindParticipatingProjects'
type MockTenantServiceServer_FindParticipatingProjects_Call struct {
	*mock.Call
}

// FindParticipatingProjects is a helper method to define mock.On call
//   - context1 context.Context
//   - findParticipatingProjectsRequest *v1.FindParticipatingProjectsRequest
func (_e *MockTenantServiceServer_Expecter) FindParticipatingProjects(context1 interface{}, findParticipatingProjectsRequest interface{}) *MockTenantServiceServer_FindParticipatingProjects_Call {
	return &MockTenantServiceServer_FindParticipatingProjects_Call{Call: _e.mock.On("FindParticipatingProjects", context1, findParticipatingProjectsRequest)}
}

func (_c *MockTenantServiceServer_FindParticipatingProjects_Call) Run(run func(context1 context.Context, findParticipatingProjectsRequest *v1.FindParticipatingProjectsRequest)) *MockTenantServiceServer_FindParticipatingProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.FindParticipatingProjectsRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.FindParticipatingProjectsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_FindParticipatingProjects_Call) Return(findParticipatingProjectsResponse *v1.FindParticipatingProjectsResponse, err error) *MockTenantServiceServer_FindParticipatingProjects_Call {
	_c.Call.Return(findParticipatingProjectsResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_FindParticipatingProjects_Call) RunAndReturn(run func(context1 context.Context, findParticipatingProjectsRequest *v1.FindParticipatingProjectsRequest) (*v1.FindParticipatingProjectsResponse, error)) *MockTenantServiceServer_FindParticipatingProjects_Call {
	_c.Call.Return(run)
	return _c
}

// FindParticipatingTenants provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) FindParticipatingTenants(context1 context.Context, findParticipatingTenantsRequest *v1.FindParticipatingTenantsRequest) (*v1.FindParticipatingTenantsResponse, error) {
	ret := _mock.Called(context1, findParticipatingTenantsRequest)

	if len(ret) == 0 {
		panic("no return value specified for FindParticipatingTenants")
	}

	var r0 *v1.FindParticipatingTenantsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.FindParticipatingTenantsRequest) (*v1.FindParticipatingTenantsResponse, error)); ok {
		return returnFunc(context1, findParticipatingTenantsRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.FindParticipatingTenantsRequest) *v1.FindParticipatingTenantsResponse); ok {
		r0 = returnFunc(context1, findParticipatingTenantsRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.FindParticipatingTenantsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.FindParticipatingTenantsRequest) error); ok {
		r1 = returnFunc(context1, findParticipatingTenantsRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_FindParticipatingTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindParticipatingTenants'
type MockTenantServiceServer_FindParticipatingTenants_Call struct {
	*mock.Call
}

// FindParticipatingTenants is a helper method to define mock.On call
//   - context1 context.Context
//   - findParticipatingTenantsRequest *v1.FindParticipatingTenantsRequest
func (_e *MockTenantServiceServer_Expecter) FindParticipatingTenants(context1 interface{}, findParticipatingTenantsRequest interface{}) *MockTenantServiceServer_FindParticipatingTenants_Call {
	return &MockTenantServiceServer_FindParticipatingTenants_Call{Call: _e.mock.On("FindParticipatingTenants", context1, findParticipatingTenantsRequest)}
}

func (_c *MockTenantServiceServer_FindParticipatingTenants_Call) Run(run func(context1 context.Context, findParticipatingTenantsRequest *v1.FindParticipatingTenantsRequest)) *MockTenantServiceServer_FindParticipatingTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.FindParticipatingTenantsRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.FindParticipatingTenantsRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_FindParticipatingTenants_Call) Return(findParticipatingTenantsResponse *v1.FindParticipatingTenantsResponse, err error) *MockTenantServiceServer_FindParticipatingTenants_Call {
	_c.Call.Return(findParticipatingTenantsResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_FindParticipatingTenants_Call) RunAndReturn(run func(context1 context.Context, findParticipatingTenantsRequest *v1.FindParticipatingTenantsRequest) (*v1.FindParticipatingTenantsResponse, error)) *MockTenantServiceServer_FindParticipatingTenants_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) Get(context1 context.Context, tenantGetRequest *v1.TenantGetRequest) (*v1.TenantResponse, error) {
	ret := _mock.Called(context1, tenantGetRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantGetRequest) (*v1.TenantResponse, error)); ok {
		return returnFunc(context1, tenantGetRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantGetRequest) *v1.TenantResponse); ok {
		r0 = returnFunc(context1, tenantGetRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TenantGetRequest) error); ok {
		r1 = returnFunc(context1, tenantGetRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTenantServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - tenantGetRequest *v1.TenantGetRequest
func (_e *MockTenantServiceServer_Expecter) Get(context1 interface{}, tenantGetRequest interface{}) *MockTenantServiceServer_Get_Call {
	return &MockTenantServiceServer_Get_Call{Call: _e.mock.On("Get", context1, tenantGetRequest)}
}

func (_c *MockTenantServiceServer_Get_Call) Run(run func(context1 context.Context, tenantGetRequest *v1.TenantGetRequest)) *MockTenantServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TenantGetRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TenantGetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_Get_Call) Return(tenantResponse *v1.TenantResponse, err error) *MockTenantServiceServer_Get_Call {
	_c.Call.Return(tenantResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_Get_Call) RunAndReturn(run func(context1 context.Context, tenantGetRequest *v1.TenantGetRequest) (*v1.TenantResponse, error)) *MockTenantServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetHistory provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) GetHistory(context1 context.Context, tenantGetHistoryRequest *v1.TenantGetHistoryRequest) (*v1.TenantResponse, error) {
	ret := _mock.Called(context1, tenantGetHistoryRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantGetHistoryRequest) (*v1.TenantResponse, error)); ok {
		return returnFunc(context1, tenantGetHistoryRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantGetHistoryRequest) *v1.TenantResponse); ok {
		r0 = returnFunc(context1, tenantGetHistoryRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TenantGetHistoryRequest) error); ok {
		r1 = returnFunc(context1, tenantGetHistoryRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_GetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistory'
type MockTenantServiceServer_GetHistory_Call struct {
	*mock.Call
}

// GetHistory is a helper method to define mock.On call
//   - context1 context.Context
//   - tenantGetHistoryRequest *v1.TenantGetHistoryRequest
func (_e *MockTenantServiceServer_Expecter) GetHistory(context1 interface{}, tenantGetHistoryRequest interface{}) *MockTenantServiceServer_GetHistory_Call {
	return &MockTenantServiceServer_GetHistory_Call{Call: _e.mock.On("GetHistory", context1, tenantGetHistoryRequest)}
}

func (_c *MockTenantServiceServer_GetHistory_Call) Run(run func(context1 context.Context, tenantGetHistoryRequest *v1.TenantGetHistoryRequest)) *MockTenantServiceServer_GetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TenantGetHistoryRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TenantGetHistoryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_GetHistory_Call) Return(tenantResponse *v1.TenantResponse, err error) *MockTenantServiceServer_GetHistory_Call {
	_c.Call.Return(tenantResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_GetHistory_Call) RunAndReturn(run func(context1 context.Context, tenantGetHistoryRequest *v1.TenantGetHistoryRequest) (*v1.TenantResponse, error)) *MockTenantServiceServer_GetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// ListTenantMembers provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) ListTenantMembers(context1 context.Context, listTenantMembersRequest *v1.ListTenantMembersRequest) (*v1.ListTenantMembersResponse, error) {
	ret := _mock.Called(context1, listTenantMembersRequest)

	if len(ret) == 0 {
		panic("no return value specified for ListTenantMembers")
	}

	var r0 *v1.ListTenantMembersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListTenantMembersRequest) (*v1.ListTenantMembersResponse, error)); ok {
		return returnFunc(context1, listTenantMembersRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ListTenantMembersRequest) *v1.ListTenantMembersResponse); ok {
		r0 = returnFunc(context1, listTenantMembersRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ListTenantMembersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ListTenantMembersRequest) error); ok {
		r1 = returnFunc(context1, listTenantMembersRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_ListTenantMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTenantMembers'
type MockTenantServiceServer_ListTenantMembers_Call struct {
	*mock.Call
}

// ListTenantMembers is a helper method to define mock.On call
//   - context1 context.Context
//   - listTenantMembersRequest *v1.ListTenantMembersRequest
func (_e *MockTenantServiceServer_Expecter) ListTenantMembers(context1 interface{}, listTenantMembersRequest interface{}) *MockTenantServiceServer_ListTenantMembers_Call {
	return &MockTenantServiceServer_ListTenantMembers_Call{Call: _e.mock.On("ListTenantMembers", context1, listTenantMembersRequest)}
}

func (_c *MockTenantServiceServer_ListTenantMembers_Call) Run(run func(context1 context.Context, listTenantMembersRequest *v1.ListTenantMembersRequest)) *MockTenantServiceServer_ListTenantMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ListTenantMembersRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ListTenantMembersRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_ListTenantMembers_Call) Return(listTenantMembersResponse *v1.ListTenantMembersResponse, err error) *MockTenantServiceServer_ListTenantMembers_Call {
	_c.Call.Return(listTenantMembersResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_ListTenantMembers_Call) RunAndReturn(run func(context1 context.Context, listTenantMembersRequest *v1.ListTenantMembersRequest) (*v1.ListTenantMembersResponse, error)) *MockTenantServiceServer_ListTenantMembers_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTenantServiceServer
func (_mock *MockTenantServiceServer) Update(context1 context.Context, tenantUpdateRequest *v1.TenantUpdateRequest) (*v1.TenantResponse, error) {
	ret := _mock.Called(context1, tenantUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.TenantResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantUpdateRequest) (*v1.TenantResponse, error)); ok {
		return returnFunc(context1, tenantUpdateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantUpdateRequest) *v1.TenantResponse); ok {
		r0 = returnFunc(context1, tenantUpdateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TenantUpdateRequest) error); ok {
		r1 = returnFunc(context1, tenantUpdateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceServer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTenantServiceServer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - tenantUpdateRequest *v1.TenantUpdateRequest
func (_e *MockTenantServiceServer_Expecter) Update(context1 interface{}, tenantUpdateRequest interface{}) *MockTenantServiceServer_Update_Call {
	return &MockTenantServiceServer_Update_Call{Call: _e.mock.On("Update", context1, tenantUpdateRequest)}
}

func (_c *MockTenantServiceServer_Update_Call) Run(run func(context1 context.Context, tenantUpdateRequest *v1.TenantUpdateRequest)) *MockTenantServiceServer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TenantUpdateRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TenantUpdateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceServer_Update_Call) Return(tenantResponse *v1.TenantResponse, err error) *MockTenantServiceServer_Update_Call {
	_c.Call.Return(tenantResponse, err)
	return _c
}

func (_c *MockTenantServiceServer_Update_Call) RunAndReturn(run func(context1 context.Context, tenantUpdateRequest *v1.TenantUpdateRequest) (*v1.TenantResponse, error)) *MockTenantServiceServer_Update_Call {
	_c.Call.Return(run)
	return _c
}
