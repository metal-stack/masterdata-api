// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockVersionServiceServer creates a new instance of MockVersionServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVersionServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVersionServiceServer {
	mock := &MockVersionServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVersionServiceServer is an autogenerated mock type for the VersionServiceServer type
type MockVersionServiceServer struct {
	mock.Mock
}

type MockVersionServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVersionServiceServer) EXPECT() *MockVersionServiceServer_Expecter {
	return &MockVersionServiceServer_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockVersionServiceServer
func (_mock *MockVersionServiceServer) Get(context1 context.Context, getVersionRequest *v1.GetVersionRequest) (*v1.GetVersionResponse, error) {
	ret := _mock.Called(context1, getVersionRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.GetVersionResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetVersionRequest) (*v1.GetVersionResponse, error)); ok {
		return returnFunc(context1, getVersionRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.GetVersionRequest) *v1.GetVersionResponse); ok {
		r0 = returnFunc(context1, getVersionRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetVersionResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.GetVersionRequest) error); ok {
		r1 = returnFunc(context1, getVersionRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVersionServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockVersionServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - getVersionRequest *v1.GetVersionRequest
func (_e *MockVersionServiceServer_Expecter) Get(context1 interface{}, getVersionRequest interface{}) *MockVersionServiceServer_Get_Call {
	return &MockVersionServiceServer_Get_Call{Call: _e.mock.On("Get", context1, getVersionRequest)}
}

func (_c *MockVersionServiceServer_Get_Call) Run(run func(context1 context.Context, getVersionRequest *v1.GetVersionRequest)) *MockVersionServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.GetVersionRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.GetVersionRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVersionServiceServer_Get_Call) Return(getVersionResponse *v1.GetVersionResponse, err error) *MockVersionServiceServer_Get_Call {
	_c.Call.Return(getVersionResponse, err)
	return _c
}

func (_c *MockVersionServiceServer_Get_Call) RunAndReturn(run func(context1 context.Context, getVersionRequest *v1.GetVersionRequest) (*v1.GetVersionResponse, error)) *MockVersionServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}
