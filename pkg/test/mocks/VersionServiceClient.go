// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"connectrpc.com/connect"
	"github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockVersionServiceClient creates a new instance of MockVersionServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVersionServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVersionServiceClient {
	mock := &MockVersionServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVersionServiceClient is an autogenerated mock type for the VersionServiceClient type
type MockVersionServiceClient struct {
	mock.Mock
}

type MockVersionServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVersionServiceClient) EXPECT() *MockVersionServiceClient_Expecter {
	return &MockVersionServiceClient_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockVersionServiceClient
func (_mock *MockVersionServiceClient) Get(context1 context.Context, request *connect.Request[apiv1.GetVersionRequest]) (*connect.Response[apiv1.GetVersionResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[apiv1.GetVersionResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.GetVersionRequest]) (*connect.Response[apiv1.GetVersionResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.GetVersionRequest]) *connect.Response[apiv1.GetVersionResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.GetVersionResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.GetVersionRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVersionServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockVersionServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.GetVersionRequest]
func (_e *MockVersionServiceClient_Expecter) Get(context1 interface{}, request interface{}) *MockVersionServiceClient_Get_Call {
	return &MockVersionServiceClient_Get_Call{Call: _e.mock.On("Get", context1, request)}
}

func (_c *MockVersionServiceClient_Get_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.GetVersionRequest])) *MockVersionServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.GetVersionRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.GetVersionRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVersionServiceClient_Get_Call) Return(response *connect.Response[apiv1.GetVersionResponse], err error) *MockVersionServiceClient_Get_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockVersionServiceClient_Get_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.GetVersionRequest]) (*connect.Response[apiv1.GetVersionResponse], error)) *MockVersionServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}
