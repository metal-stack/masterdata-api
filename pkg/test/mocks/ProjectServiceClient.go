// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// NewMockProjectServiceClient creates a new instance of MockProjectServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectServiceClient {
	mock := &MockProjectServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectServiceClient is an autogenerated mock type for the ProjectServiceClient type
type MockProjectServiceClient struct {
	mock.Mock
}

type MockProjectServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectServiceClient) EXPECT() *MockProjectServiceClient_Expecter {
	return &MockProjectServiceClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProjectServiceClient
func (_mock *MockProjectServiceClient) Create(ctx context.Context, in *v1.ProjectCreateRequest, opts ...grpc.CallOption) (*v1.ProjectResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.ProjectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectCreateRequest, ...grpc.CallOption) (*v1.ProjectResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectCreateRequest, ...grpc.CallOption) *v1.ProjectResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectCreateRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectServiceClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.ProjectCreateRequest
//   - opts ...grpc.CallOption
func (_e *MockProjectServiceClient_Expecter) Create(ctx interface{}, in interface{}, opts ...interface{}) *MockProjectServiceClient_Create_Call {
	return &MockProjectServiceClient_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProjectServiceClient_Create_Call) Run(run func(ctx context.Context, in *v1.ProjectCreateRequest, opts ...grpc.CallOption)) *MockProjectServiceClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectCreateRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectCreateRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProjectServiceClient_Create_Call) Return(projectResponse *v1.ProjectResponse, err error) *MockProjectServiceClient_Create_Call {
	_c.Call.Return(projectResponse, err)
	return _c
}

func (_c *MockProjectServiceClient_Create_Call) RunAndReturn(run func(ctx context.Context, in *v1.ProjectCreateRequest, opts ...grpc.CallOption) (*v1.ProjectResponse, error)) *MockProjectServiceClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProjectServiceClient
func (_mock *MockProjectServiceClient) Delete(ctx context.Context, in *v1.ProjectDeleteRequest, opts ...grpc.CallOption) (*v1.ProjectResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.ProjectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectDeleteRequest, ...grpc.CallOption) (*v1.ProjectResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectDeleteRequest, ...grpc.CallOption) *v1.ProjectResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectDeleteRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProjectServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.ProjectDeleteRequest
//   - opts ...grpc.CallOption
func (_e *MockProjectServiceClient_Expecter) Delete(ctx interface{}, in interface{}, opts ...interface{}) *MockProjectServiceClient_Delete_Call {
	return &MockProjectServiceClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProjectServiceClient_Delete_Call) Run(run func(ctx context.Context, in *v1.ProjectDeleteRequest, opts ...grpc.CallOption)) *MockProjectServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectDeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectDeleteRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProjectServiceClient_Delete_Call) Return(projectResponse *v1.ProjectResponse, err error) *MockProjectServiceClient_Delete_Call {
	_c.Call.Return(projectResponse, err)
	return _c
}

func (_c *MockProjectServiceClient_Delete_Call) RunAndReturn(run func(ctx context.Context, in *v1.ProjectDeleteRequest, opts ...grpc.CallOption) (*v1.ProjectResponse, error)) *MockProjectServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockProjectServiceClient
func (_mock *MockProjectServiceClient) Find(ctx context.Context, in *v1.ProjectFindRequest, opts ...grpc.CallOption) (*v1.ProjectListResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *v1.ProjectListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectFindRequest, ...grpc.CallOption) (*v1.ProjectListResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectFindRequest, ...grpc.CallOption) *v1.ProjectListResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectFindRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceClient_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockProjectServiceClient_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.ProjectFindRequest
//   - opts ...grpc.CallOption
func (_e *MockProjectServiceClient_Expecter) Find(ctx interface{}, in interface{}, opts ...interface{}) *MockProjectServiceClient_Find_Call {
	return &MockProjectServiceClient_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProjectServiceClient_Find_Call) Run(run func(ctx context.Context, in *v1.ProjectFindRequest, opts ...grpc.CallOption)) *MockProjectServiceClient_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectFindRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectFindRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProjectServiceClient_Find_Call) Return(projectListResponse *v1.ProjectListResponse, err error) *MockProjectServiceClient_Find_Call {
	_c.Call.Return(projectListResponse, err)
	return _c
}

func (_c *MockProjectServiceClient_Find_Call) RunAndReturn(run func(ctx context.Context, in *v1.ProjectFindRequest, opts ...grpc.CallOption) (*v1.ProjectListResponse, error)) *MockProjectServiceClient_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockProjectServiceClient
func (_mock *MockProjectServiceClient) Get(ctx context.Context, in *v1.ProjectGetRequest, opts ...grpc.CallOption) (*v1.ProjectResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.ProjectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectGetRequest, ...grpc.CallOption) (*v1.ProjectResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectGetRequest, ...grpc.CallOption) *v1.ProjectResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectGetRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProjectServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.ProjectGetRequest
//   - opts ...grpc.CallOption
func (_e *MockProjectServiceClient_Expecter) Get(ctx interface{}, in interface{}, opts ...interface{}) *MockProjectServiceClient_Get_Call {
	return &MockProjectServiceClient_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProjectServiceClient_Get_Call) Run(run func(ctx context.Context, in *v1.ProjectGetRequest, opts ...grpc.CallOption)) *MockProjectServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectGetRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectGetRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProjectServiceClient_Get_Call) Return(projectResponse *v1.ProjectResponse, err error) *MockProjectServiceClient_Get_Call {
	_c.Call.Return(projectResponse, err)
	return _c
}

func (_c *MockProjectServiceClient_Get_Call) RunAndReturn(run func(ctx context.Context, in *v1.ProjectGetRequest, opts ...grpc.CallOption) (*v1.ProjectResponse, error)) *MockProjectServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetHistory provides a mock function for the type MockProjectServiceClient
func (_mock *MockProjectServiceClient) GetHistory(ctx context.Context, in *v1.ProjectGetHistoryRequest, opts ...grpc.CallOption) (*v1.ProjectResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 *v1.ProjectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectGetHistoryRequest, ...grpc.CallOption) (*v1.ProjectResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectGetHistoryRequest, ...grpc.CallOption) *v1.ProjectResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectGetHistoryRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceClient_GetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistory'
type MockProjectServiceClient_GetHistory_Call struct {
	*mock.Call
}

// GetHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.ProjectGetHistoryRequest
//   - opts ...grpc.CallOption
func (_e *MockProjectServiceClient_Expecter) GetHistory(ctx interface{}, in interface{}, opts ...interface{}) *MockProjectServiceClient_GetHistory_Call {
	return &MockProjectServiceClient_GetHistory_Call{Call: _e.mock.On("GetHistory",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProjectServiceClient_GetHistory_Call) Run(run func(ctx context.Context, in *v1.ProjectGetHistoryRequest, opts ...grpc.CallOption)) *MockProjectServiceClient_GetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectGetHistoryRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectGetHistoryRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProjectServiceClient_GetHistory_Call) Return(projectResponse *v1.ProjectResponse, err error) *MockProjectServiceClient_GetHistory_Call {
	_c.Call.Return(projectResponse, err)
	return _c
}

func (_c *MockProjectServiceClient_GetHistory_Call) RunAndReturn(run func(ctx context.Context, in *v1.ProjectGetHistoryRequest, opts ...grpc.CallOption) (*v1.ProjectResponse, error)) *MockProjectServiceClient_GetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockProjectServiceClient
func (_mock *MockProjectServiceClient) Update(ctx context.Context, in *v1.ProjectUpdateRequest, opts ...grpc.CallOption) (*v1.ProjectResponse, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, in, opts)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.ProjectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectUpdateRequest, ...grpc.CallOption) (*v1.ProjectResponse, error)); ok {
		return returnFunc(ctx, in, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectUpdateRequest, ...grpc.CallOption) *v1.ProjectResponse); ok {
		r0 = returnFunc(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectUpdateRequest, ...grpc.CallOption) error); ok {
		r1 = returnFunc(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProjectServiceClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v1.ProjectUpdateRequest
//   - opts ...grpc.CallOption
func (_e *MockProjectServiceClient_Expecter) Update(ctx interface{}, in interface{}, opts ...interface{}) *MockProjectServiceClient_Update_Call {
	return &MockProjectServiceClient_Update_Call{Call: _e.mock.On("Update",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *MockProjectServiceClient_Update_Call) Run(run func(ctx context.Context, in *v1.ProjectUpdateRequest, opts ...grpc.CallOption)) *MockProjectServiceClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectUpdateRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectUpdateRequest)
		}
		var arg2 []grpc.CallOption
		var variadicArgs []grpc.CallOption
		if len(args) > 2 {
			variadicArgs = args[2].([]grpc.CallOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockProjectServiceClient_Update_Call) Return(projectResponse *v1.ProjectResponse, err error) *MockProjectServiceClient_Update_Call {
	_c.Call.Return(projectResponse, err)
	return _c
}

func (_c *MockProjectServiceClient_Update_Call) RunAndReturn(run func(ctx context.Context, in *v1.ProjectUpdateRequest, opts ...grpc.CallOption) (*v1.ProjectResponse, error)) *MockProjectServiceClient_Update_Call {
	_c.Call.Return(run)
	return _c
}
