// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"connectrpc.com/connect"
	"github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTenantServiceClient creates a new instance of MockTenantServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTenantServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTenantServiceClient {
	mock := &MockTenantServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTenantServiceClient is an autogenerated mock type for the TenantServiceClient type
type MockTenantServiceClient struct {
	mock.Mock
}

type MockTenantServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantServiceClient) EXPECT() *MockTenantServiceClient_Expecter {
	return &MockTenantServiceClient_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) Create(context1 context.Context, request *connect.Request[apiv1.TenantCreateRequest]) (*connect.Response[apiv1.TenantResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *connect.Response[apiv1.TenantResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantCreateRequest]) (*connect.Response[apiv1.TenantResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantCreateRequest]) *connect.Response[apiv1.TenantResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantCreateRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTenantServiceClient_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.TenantCreateRequest]
func (_e *MockTenantServiceClient_Expecter) Create(context1 interface{}, request interface{}) *MockTenantServiceClient_Create_Call {
	return &MockTenantServiceClient_Create_Call{Call: _e.mock.On("Create", context1, request)}
}

func (_c *MockTenantServiceClient_Create_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.TenantCreateRequest])) *MockTenantServiceClient_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.TenantCreateRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.TenantCreateRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_Create_Call) Return(response *connect.Response[apiv1.TenantResponse], err error) *MockTenantServiceClient_Create_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantServiceClient_Create_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.TenantCreateRequest]) (*connect.Response[apiv1.TenantResponse], error)) *MockTenantServiceClient_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) Delete(context1 context.Context, request *connect.Request[apiv1.TenantDeleteRequest]) (*connect.Response[apiv1.TenantResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *connect.Response[apiv1.TenantResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantDeleteRequest]) (*connect.Response[apiv1.TenantResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantDeleteRequest]) *connect.Response[apiv1.TenantResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantDeleteRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTenantServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.TenantDeleteRequest]
func (_e *MockTenantServiceClient_Expecter) Delete(context1 interface{}, request interface{}) *MockTenantServiceClient_Delete_Call {
	return &MockTenantServiceClient_Delete_Call{Call: _e.mock.On("Delete", context1, request)}
}

func (_c *MockTenantServiceClient_Delete_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.TenantDeleteRequest])) *MockTenantServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.TenantDeleteRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.TenantDeleteRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_Delete_Call) Return(response *connect.Response[apiv1.TenantResponse], err error) *MockTenantServiceClient_Delete_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantServiceClient_Delete_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.TenantDeleteRequest]) (*connect.Response[apiv1.TenantResponse], error)) *MockTenantServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) Find(context1 context.Context, request *connect.Request[apiv1.TenantFindRequest]) (*connect.Response[apiv1.TenantListResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *connect.Response[apiv1.TenantListResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantFindRequest]) (*connect.Response[apiv1.TenantListResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantFindRequest]) *connect.Response[apiv1.TenantListResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantListResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantFindRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockTenantServiceClient_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.TenantFindRequest]
func (_e *MockTenantServiceClient_Expecter) Find(context1 interface{}, request interface{}) *MockTenantServiceClient_Find_Call {
	return &MockTenantServiceClient_Find_Call{Call: _e.mock.On("Find", context1, request)}
}

func (_c *MockTenantServiceClient_Find_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.TenantFindRequest])) *MockTenantServiceClient_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.TenantFindRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.TenantFindRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_Find_Call) Return(response *connect.Response[apiv1.TenantListResponse], err error) *MockTenantServiceClient_Find_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantServiceClient_Find_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.TenantFindRequest]) (*connect.Response[apiv1.TenantListResponse], error)) *MockTenantServiceClient_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindParticipatingProjects provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) FindParticipatingProjects(context1 context.Context, request *connect.Request[apiv1.FindParticipatingProjectsRequest]) (*connect.Response[apiv1.FindParticipatingProjectsResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for FindParticipatingProjects")
	}

	var r0 *connect.Response[apiv1.FindParticipatingProjectsResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.FindParticipatingProjectsRequest]) (*connect.Response[apiv1.FindParticipatingProjectsResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.FindParticipatingProjectsRequest]) *connect.Response[apiv1.FindParticipatingProjectsResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.FindParticipatingProjectsResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.FindParticipatingProjectsRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_FindParticipatingProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindParticipatingProjects'
type MockTenantServiceClient_FindParticipatingProjects_Call struct {
	*mock.Call
}

// FindParticipatingProjects is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.FindParticipatingProjectsRequest]
func (_e *MockTenantServiceClient_Expecter) FindParticipatingProjects(context1 interface{}, request interface{}) *MockTenantServiceClient_FindParticipatingProjects_Call {
	return &MockTenantServiceClient_FindParticipatingProjects_Call{Call: _e.mock.On("FindParticipatingProjects", context1, request)}
}

func (_c *MockTenantServiceClient_FindParticipatingProjects_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.FindParticipatingProjectsRequest])) *MockTenantServiceClient_FindParticipatingProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.FindParticipatingProjectsRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.FindParticipatingProjectsRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_FindParticipatingProjects_Call) Return(response *connect.Response[apiv1.FindParticipatingProjectsResponse], err error) *MockTenantServiceClient_FindParticipatingProjects_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantServiceClient_FindParticipatingProjects_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.FindParticipatingProjectsRequest]) (*connect.Response[apiv1.FindParticipatingProjectsResponse], error)) *MockTenantServiceClient_FindParticipatingProjects_Call {
	_c.Call.Return(run)
	return _c
}

// FindParticipatingTenants provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) FindParticipatingTenants(context1 context.Context, request *connect.Request[apiv1.FindParticipatingTenantsRequest]) (*connect.Response[apiv1.FindParticipatingTenantsResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for FindParticipatingTenants")
	}

	var r0 *connect.Response[apiv1.FindParticipatingTenantsResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.FindParticipatingTenantsRequest]) (*connect.Response[apiv1.FindParticipatingTenantsResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.FindParticipatingTenantsRequest]) *connect.Response[apiv1.FindParticipatingTenantsResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.FindParticipatingTenantsResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.FindParticipatingTenantsRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_FindParticipatingTenants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindParticipatingTenants'
type MockTenantServiceClient_FindParticipatingTenants_Call struct {
	*mock.Call
}

// FindParticipatingTenants is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.FindParticipatingTenantsRequest]
func (_e *MockTenantServiceClient_Expecter) FindParticipatingTenants(context1 interface{}, request interface{}) *MockTenantServiceClient_FindParticipatingTenants_Call {
	return &MockTenantServiceClient_FindParticipatingTenants_Call{Call: _e.mock.On("FindParticipatingTenants", context1, request)}
}

func (_c *MockTenantServiceClient_FindParticipatingTenants_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.FindParticipatingTenantsRequest])) *MockTenantServiceClient_FindParticipatingTenants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.FindParticipatingTenantsRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.FindParticipatingTenantsRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_FindParticipatingTenants_Call) Return(response *connect.Response[apiv1.FindParticipatingTenantsResponse], err error) *MockTenantServiceClient_FindParticipatingTenants_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantServiceClient_FindParticipatingTenants_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.FindParticipatingTenantsRequest]) (*connect.Response[apiv1.FindParticipatingTenantsResponse], error)) *MockTenantServiceClient_FindParticipatingTenants_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) Get(context1 context.Context, request *connect.Request[apiv1.TenantGetRequest]) (*connect.Response[apiv1.TenantResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[apiv1.TenantResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantGetRequest]) (*connect.Response[apiv1.TenantResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantGetRequest]) *connect.Response[apiv1.TenantResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantGetRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTenantServiceClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.TenantGetRequest]
func (_e *MockTenantServiceClient_Expecter) Get(context1 interface{}, request interface{}) *MockTenantServiceClient_Get_Call {
	return &MockTenantServiceClient_Get_Call{Call: _e.mock.On("Get", context1, request)}
}

func (_c *MockTenantServiceClient_Get_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.TenantGetRequest])) *MockTenantServiceClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.TenantGetRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.TenantGetRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_Get_Call) Return(response *connect.Response[apiv1.TenantResponse], err error) *MockTenantServiceClient_Get_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantServiceClient_Get_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.TenantGetRequest]) (*connect.Response[apiv1.TenantResponse], error)) *MockTenantServiceClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetHistory provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) GetHistory(context1 context.Context, request *connect.Request[apiv1.TenantGetHistoryRequest]) (*connect.Response[apiv1.TenantResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 *connect.Response[apiv1.TenantResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantGetHistoryRequest]) (*connect.Response[apiv1.TenantResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantGetHistoryRequest]) *connect.Response[apiv1.TenantResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantGetHistoryRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_GetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistory'
type MockTenantServiceClient_GetHistory_Call struct {
	*mock.Call
}

// GetHistory is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.TenantGetHistoryRequest]
func (_e *MockTenantServiceClient_Expecter) GetHistory(context1 interface{}, request interface{}) *MockTenantServiceClient_GetHistory_Call {
	return &MockTenantServiceClient_GetHistory_Call{Call: _e.mock.On("GetHistory", context1, request)}
}

func (_c *MockTenantServiceClient_GetHistory_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.TenantGetHistoryRequest])) *MockTenantServiceClient_GetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.TenantGetHistoryRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.TenantGetHistoryRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_GetHistory_Call) Return(response *connect.Response[apiv1.TenantResponse], err error) *MockTenantServiceClient_GetHistory_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantServiceClient_GetHistory_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.TenantGetHistoryRequest]) (*connect.Response[apiv1.TenantResponse], error)) *MockTenantServiceClient_GetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// ListTenantMembers provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) ListTenantMembers(context1 context.Context, request *connect.Request[apiv1.ListTenantMembersRequest]) (*connect.Response[apiv1.ListTenantMembersResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for ListTenantMembers")
	}

	var r0 *connect.Response[apiv1.ListTenantMembersResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ListTenantMembersRequest]) (*connect.Response[apiv1.ListTenantMembersResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ListTenantMembersRequest]) *connect.Response[apiv1.ListTenantMembersResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ListTenantMembersResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ListTenantMembersRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_ListTenantMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTenantMembers'
type MockTenantServiceClient_ListTenantMembers_Call struct {
	*mock.Call
}

// ListTenantMembers is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.ListTenantMembersRequest]
func (_e *MockTenantServiceClient_Expecter) ListTenantMembers(context1 interface{}, request interface{}) *MockTenantServiceClient_ListTenantMembers_Call {
	return &MockTenantServiceClient_ListTenantMembers_Call{Call: _e.mock.On("ListTenantMembers", context1, request)}
}

func (_c *MockTenantServiceClient_ListTenantMembers_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.ListTenantMembersRequest])) *MockTenantServiceClient_ListTenantMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.ListTenantMembersRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.ListTenantMembersRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_ListTenantMembers_Call) Return(response *connect.Response[apiv1.ListTenantMembersResponse], err error) *MockTenantServiceClient_ListTenantMembers_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantServiceClient_ListTenantMembers_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.ListTenantMembersRequest]) (*connect.Response[apiv1.ListTenantMembersResponse], error)) *MockTenantServiceClient_ListTenantMembers_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTenantServiceClient
func (_mock *MockTenantServiceClient) Update(context1 context.Context, request *connect.Request[apiv1.TenantUpdateRequest]) (*connect.Response[apiv1.TenantResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *connect.Response[apiv1.TenantResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantUpdateRequest]) (*connect.Response[apiv1.TenantResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantUpdateRequest]) *connect.Response[apiv1.TenantResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantUpdateRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantServiceClient_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTenantServiceClient_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.TenantUpdateRequest]
func (_e *MockTenantServiceClient_Expecter) Update(context1 interface{}, request interface{}) *MockTenantServiceClient_Update_Call {
	return &MockTenantServiceClient_Update_Call{Call: _e.mock.On("Update", context1, request)}
}

func (_c *MockTenantServiceClient_Update_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.TenantUpdateRequest])) *MockTenantServiceClient_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.TenantUpdateRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.TenantUpdateRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantServiceClient_Update_Call) Return(response *connect.Response[apiv1.TenantResponse], err error) *MockTenantServiceClient_Update_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantServiceClient_Update_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.TenantUpdateRequest]) (*connect.Response[apiv1.TenantResponse], error)) *MockTenantServiceClient_Update_Call {
	_c.Call.Return(run)
	return _c
}
