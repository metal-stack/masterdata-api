// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"connectrpc.com/connect"
	"github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProjectServiceHandler creates a new instance of MockProjectServiceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectServiceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectServiceHandler {
	mock := &MockProjectServiceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectServiceHandler is an autogenerated mock type for the ProjectServiceHandler type
type MockProjectServiceHandler struct {
	mock.Mock
}

type MockProjectServiceHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectServiceHandler) EXPECT() *MockProjectServiceHandler_Expecter {
	return &MockProjectServiceHandler_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProjectServiceHandler
func (_mock *MockProjectServiceHandler) Create(context1 context.Context, request *connect.Request[apiv1.ProjectCreateRequest]) (*connect.Response[apiv1.ProjectResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *connect.Response[apiv1.ProjectResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectCreateRequest]) (*connect.Response[apiv1.ProjectResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectCreateRequest]) *connect.Response[apiv1.ProjectResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ProjectResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectCreateRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectServiceHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.ProjectCreateRequest]
func (_e *MockProjectServiceHandler_Expecter) Create(context1 interface{}, request interface{}) *MockProjectServiceHandler_Create_Call {
	return &MockProjectServiceHandler_Create_Call{Call: _e.mock.On("Create", context1, request)}
}

func (_c *MockProjectServiceHandler_Create_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.ProjectCreateRequest])) *MockProjectServiceHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.ProjectCreateRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.ProjectCreateRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceHandler_Create_Call) Return(response *connect.Response[apiv1.ProjectResponse], err error) *MockProjectServiceHandler_Create_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockProjectServiceHandler_Create_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.ProjectCreateRequest]) (*connect.Response[apiv1.ProjectResponse], error)) *MockProjectServiceHandler_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProjectServiceHandler
func (_mock *MockProjectServiceHandler) Delete(context1 context.Context, request *connect.Request[apiv1.ProjectDeleteRequest]) (*connect.Response[apiv1.ProjectResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *connect.Response[apiv1.ProjectResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectDeleteRequest]) (*connect.Response[apiv1.ProjectResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectDeleteRequest]) *connect.Response[apiv1.ProjectResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ProjectResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectDeleteRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProjectServiceHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.ProjectDeleteRequest]
func (_e *MockProjectServiceHandler_Expecter) Delete(context1 interface{}, request interface{}) *MockProjectServiceHandler_Delete_Call {
	return &MockProjectServiceHandler_Delete_Call{Call: _e.mock.On("Delete", context1, request)}
}

func (_c *MockProjectServiceHandler_Delete_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.ProjectDeleteRequest])) *MockProjectServiceHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.ProjectDeleteRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.ProjectDeleteRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceHandler_Delete_Call) Return(response *connect.Response[apiv1.ProjectResponse], err error) *MockProjectServiceHandler_Delete_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockProjectServiceHandler_Delete_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.ProjectDeleteRequest]) (*connect.Response[apiv1.ProjectResponse], error)) *MockProjectServiceHandler_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockProjectServiceHandler
func (_mock *MockProjectServiceHandler) Find(context1 context.Context, request *connect.Request[apiv1.ProjectFindRequest]) (*connect.Response[apiv1.ProjectListResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *connect.Response[apiv1.ProjectListResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectFindRequest]) (*connect.Response[apiv1.ProjectListResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectFindRequest]) *connect.Response[apiv1.ProjectListResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ProjectListResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectFindRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceHandler_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockProjectServiceHandler_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.ProjectFindRequest]
func (_e *MockProjectServiceHandler_Expecter) Find(context1 interface{}, request interface{}) *MockProjectServiceHandler_Find_Call {
	return &MockProjectServiceHandler_Find_Call{Call: _e.mock.On("Find", context1, request)}
}

func (_c *MockProjectServiceHandler_Find_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.ProjectFindRequest])) *MockProjectServiceHandler_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.ProjectFindRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.ProjectFindRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceHandler_Find_Call) Return(response *connect.Response[apiv1.ProjectListResponse], err error) *MockProjectServiceHandler_Find_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockProjectServiceHandler_Find_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.ProjectFindRequest]) (*connect.Response[apiv1.ProjectListResponse], error)) *MockProjectServiceHandler_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockProjectServiceHandler
func (_mock *MockProjectServiceHandler) Get(context1 context.Context, request *connect.Request[apiv1.ProjectGetRequest]) (*connect.Response[apiv1.ProjectResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[apiv1.ProjectResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectGetRequest]) (*connect.Response[apiv1.ProjectResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectGetRequest]) *connect.Response[apiv1.ProjectResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ProjectResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectGetRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceHandler_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProjectServiceHandler_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.ProjectGetRequest]
func (_e *MockProjectServiceHandler_Expecter) Get(context1 interface{}, request interface{}) *MockProjectServiceHandler_Get_Call {
	return &MockProjectServiceHandler_Get_Call{Call: _e.mock.On("Get", context1, request)}
}

func (_c *MockProjectServiceHandler_Get_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.ProjectGetRequest])) *MockProjectServiceHandler_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.ProjectGetRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.ProjectGetRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceHandler_Get_Call) Return(response *connect.Response[apiv1.ProjectResponse], err error) *MockProjectServiceHandler_Get_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockProjectServiceHandler_Get_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.ProjectGetRequest]) (*connect.Response[apiv1.ProjectResponse], error)) *MockProjectServiceHandler_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetHistory provides a mock function for the type MockProjectServiceHandler
func (_mock *MockProjectServiceHandler) GetHistory(context1 context.Context, request *connect.Request[apiv1.ProjectGetHistoryRequest]) (*connect.Response[apiv1.ProjectResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 *connect.Response[apiv1.ProjectResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectGetHistoryRequest]) (*connect.Response[apiv1.ProjectResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectGetHistoryRequest]) *connect.Response[apiv1.ProjectResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ProjectResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectGetHistoryRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceHandler_GetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistory'
type MockProjectServiceHandler_GetHistory_Call struct {
	*mock.Call
}

// GetHistory is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.ProjectGetHistoryRequest]
func (_e *MockProjectServiceHandler_Expecter) GetHistory(context1 interface{}, request interface{}) *MockProjectServiceHandler_GetHistory_Call {
	return &MockProjectServiceHandler_GetHistory_Call{Call: _e.mock.On("GetHistory", context1, request)}
}

func (_c *MockProjectServiceHandler_GetHistory_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.ProjectGetHistoryRequest])) *MockProjectServiceHandler_GetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.ProjectGetHistoryRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.ProjectGetHistoryRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceHandler_GetHistory_Call) Return(response *connect.Response[apiv1.ProjectResponse], err error) *MockProjectServiceHandler_GetHistory_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockProjectServiceHandler_GetHistory_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.ProjectGetHistoryRequest]) (*connect.Response[apiv1.ProjectResponse], error)) *MockProjectServiceHandler_GetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockProjectServiceHandler
func (_mock *MockProjectServiceHandler) Update(context1 context.Context, request *connect.Request[apiv1.ProjectUpdateRequest]) (*connect.Response[apiv1.ProjectResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *connect.Response[apiv1.ProjectResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectUpdateRequest]) (*connect.Response[apiv1.ProjectResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.ProjectUpdateRequest]) *connect.Response[apiv1.ProjectResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.ProjectResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.ProjectUpdateRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProjectServiceHandler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.ProjectUpdateRequest]
func (_e *MockProjectServiceHandler_Expecter) Update(context1 interface{}, request interface{}) *MockProjectServiceHandler_Update_Call {
	return &MockProjectServiceHandler_Update_Call{Call: _e.mock.On("Update", context1, request)}
}

func (_c *MockProjectServiceHandler_Update_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.ProjectUpdateRequest])) *MockProjectServiceHandler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.ProjectUpdateRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.ProjectUpdateRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceHandler_Update_Call) Return(response *connect.Response[apiv1.ProjectResponse], err error) *MockProjectServiceHandler_Update_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockProjectServiceHandler_Update_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.ProjectUpdateRequest]) (*connect.Response[apiv1.ProjectResponse], error)) *MockProjectServiceHandler_Update_Call {
	_c.Call.Return(run)
	return _c
}
