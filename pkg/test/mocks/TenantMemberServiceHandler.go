// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"connectrpc.com/connect"
	"github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTenantMemberServiceHandler creates a new instance of MockTenantMemberServiceHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTenantMemberServiceHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTenantMemberServiceHandler {
	mock := &MockTenantMemberServiceHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTenantMemberServiceHandler is an autogenerated mock type for the TenantMemberServiceHandler type
type MockTenantMemberServiceHandler struct {
	mock.Mock
}

type MockTenantMemberServiceHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantMemberServiceHandler) EXPECT() *MockTenantMemberServiceHandler_Expecter {
	return &MockTenantMemberServiceHandler_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTenantMemberServiceHandler
func (_mock *MockTenantMemberServiceHandler) Create(context1 context.Context, request *connect.Request[apiv1.TenantMemberCreateRequest]) (*connect.Response[apiv1.TenantMemberResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *connect.Response[apiv1.TenantMemberResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantMemberCreateRequest]) (*connect.Response[apiv1.TenantMemberResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantMemberCreateRequest]) *connect.Response[apiv1.TenantMemberResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantMemberResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantMemberCreateRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantMemberServiceHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTenantMemberServiceHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.TenantMemberCreateRequest]
func (_e *MockTenantMemberServiceHandler_Expecter) Create(context1 interface{}, request interface{}) *MockTenantMemberServiceHandler_Create_Call {
	return &MockTenantMemberServiceHandler_Create_Call{Call: _e.mock.On("Create", context1, request)}
}

func (_c *MockTenantMemberServiceHandler_Create_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.TenantMemberCreateRequest])) *MockTenantMemberServiceHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.TenantMemberCreateRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.TenantMemberCreateRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantMemberServiceHandler_Create_Call) Return(response *connect.Response[apiv1.TenantMemberResponse], err error) *MockTenantMemberServiceHandler_Create_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantMemberServiceHandler_Create_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.TenantMemberCreateRequest]) (*connect.Response[apiv1.TenantMemberResponse], error)) *MockTenantMemberServiceHandler_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTenantMemberServiceHandler
func (_mock *MockTenantMemberServiceHandler) Delete(context1 context.Context, request *connect.Request[apiv1.TenantMemberDeleteRequest]) (*connect.Response[apiv1.TenantMemberResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *connect.Response[apiv1.TenantMemberResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantMemberDeleteRequest]) (*connect.Response[apiv1.TenantMemberResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantMemberDeleteRequest]) *connect.Response[apiv1.TenantMemberResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantMemberResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantMemberDeleteRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantMemberServiceHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTenantMemberServiceHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.TenantMemberDeleteRequest]
func (_e *MockTenantMemberServiceHandler_Expecter) Delete(context1 interface{}, request interface{}) *MockTenantMemberServiceHandler_Delete_Call {
	return &MockTenantMemberServiceHandler_Delete_Call{Call: _e.mock.On("Delete", context1, request)}
}

func (_c *MockTenantMemberServiceHandler_Delete_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.TenantMemberDeleteRequest])) *MockTenantMemberServiceHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.TenantMemberDeleteRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.TenantMemberDeleteRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantMemberServiceHandler_Delete_Call) Return(response *connect.Response[apiv1.TenantMemberResponse], err error) *MockTenantMemberServiceHandler_Delete_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantMemberServiceHandler_Delete_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.TenantMemberDeleteRequest]) (*connect.Response[apiv1.TenantMemberResponse], error)) *MockTenantMemberServiceHandler_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockTenantMemberServiceHandler
func (_mock *MockTenantMemberServiceHandler) Find(context1 context.Context, request *connect.Request[apiv1.TenantMemberFindRequest]) (*connect.Response[apiv1.TenantMemberListResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *connect.Response[apiv1.TenantMemberListResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantMemberFindRequest]) (*connect.Response[apiv1.TenantMemberListResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantMemberFindRequest]) *connect.Response[apiv1.TenantMemberListResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantMemberListResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantMemberFindRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantMemberServiceHandler_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockTenantMemberServiceHandler_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.TenantMemberFindRequest]
func (_e *MockTenantMemberServiceHandler_Expecter) Find(context1 interface{}, request interface{}) *MockTenantMemberServiceHandler_Find_Call {
	return &MockTenantMemberServiceHandler_Find_Call{Call: _e.mock.On("Find", context1, request)}
}

func (_c *MockTenantMemberServiceHandler_Find_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.TenantMemberFindRequest])) *MockTenantMemberServiceHandler_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.TenantMemberFindRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.TenantMemberFindRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantMemberServiceHandler_Find_Call) Return(response *connect.Response[apiv1.TenantMemberListResponse], err error) *MockTenantMemberServiceHandler_Find_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantMemberServiceHandler_Find_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.TenantMemberFindRequest]) (*connect.Response[apiv1.TenantMemberListResponse], error)) *MockTenantMemberServiceHandler_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockTenantMemberServiceHandler
func (_mock *MockTenantMemberServiceHandler) Get(context1 context.Context, request *connect.Request[apiv1.TenantMemberGetRequest]) (*connect.Response[apiv1.TenantMemberResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *connect.Response[apiv1.TenantMemberResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantMemberGetRequest]) (*connect.Response[apiv1.TenantMemberResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantMemberGetRequest]) *connect.Response[apiv1.TenantMemberResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantMemberResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantMemberGetRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantMemberServiceHandler_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTenantMemberServiceHandler_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.TenantMemberGetRequest]
func (_e *MockTenantMemberServiceHandler_Expecter) Get(context1 interface{}, request interface{}) *MockTenantMemberServiceHandler_Get_Call {
	return &MockTenantMemberServiceHandler_Get_Call{Call: _e.mock.On("Get", context1, request)}
}

func (_c *MockTenantMemberServiceHandler_Get_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.TenantMemberGetRequest])) *MockTenantMemberServiceHandler_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.TenantMemberGetRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.TenantMemberGetRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantMemberServiceHandler_Get_Call) Return(response *connect.Response[apiv1.TenantMemberResponse], err error) *MockTenantMemberServiceHandler_Get_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantMemberServiceHandler_Get_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.TenantMemberGetRequest]) (*connect.Response[apiv1.TenantMemberResponse], error)) *MockTenantMemberServiceHandler_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTenantMemberServiceHandler
func (_mock *MockTenantMemberServiceHandler) Update(context1 context.Context, request *connect.Request[apiv1.TenantMemberUpdateRequest]) (*connect.Response[apiv1.TenantMemberResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *connect.Response[apiv1.TenantMemberResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantMemberUpdateRequest]) (*connect.Response[apiv1.TenantMemberResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[apiv1.TenantMemberUpdateRequest]) *connect.Response[apiv1.TenantMemberResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[apiv1.TenantMemberResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[apiv1.TenantMemberUpdateRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantMemberServiceHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTenantMemberServiceHandler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[apiv1.TenantMemberUpdateRequest]
func (_e *MockTenantMemberServiceHandler_Expecter) Update(context1 interface{}, request interface{}) *MockTenantMemberServiceHandler_Update_Call {
	return &MockTenantMemberServiceHandler_Update_Call{Call: _e.mock.On("Update", context1, request)}
}

func (_c *MockTenantMemberServiceHandler_Update_Call) Run(run func(context1 context.Context, request *connect.Request[apiv1.TenantMemberUpdateRequest])) *MockTenantMemberServiceHandler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[apiv1.TenantMemberUpdateRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[apiv1.TenantMemberUpdateRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantMemberServiceHandler_Update_Call) Return(response *connect.Response[apiv1.TenantMemberResponse], err error) *MockTenantMemberServiceHandler_Update_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTenantMemberServiceHandler_Update_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[apiv1.TenantMemberUpdateRequest]) (*connect.Response[apiv1.TenantMemberResponse], error)) *MockTenantMemberServiceHandler_Update_Call {
	_c.Call.Return(run)
	return _c
}
