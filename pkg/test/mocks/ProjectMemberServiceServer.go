// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProjectMemberServiceServer creates a new instance of MockProjectMemberServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectMemberServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectMemberServiceServer {
	mock := &MockProjectMemberServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectMemberServiceServer is an autogenerated mock type for the ProjectMemberServiceServer type
type MockProjectMemberServiceServer struct {
	mock.Mock
}

type MockProjectMemberServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectMemberServiceServer) EXPECT() *MockProjectMemberServiceServer_Expecter {
	return &MockProjectMemberServiceServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProjectMemberServiceServer
func (_mock *MockProjectMemberServiceServer) Create(context1 context.Context, projectMemberCreateRequest *v1.ProjectMemberCreateRequest) (*v1.ProjectMemberResponse, error) {
	ret := _mock.Called(context1, projectMemberCreateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.ProjectMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectMemberCreateRequest) (*v1.ProjectMemberResponse, error)); ok {
		return returnFunc(context1, projectMemberCreateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectMemberCreateRequest) *v1.ProjectMemberResponse); ok {
		r0 = returnFunc(context1, projectMemberCreateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectMemberCreateRequest) error); ok {
		r1 = returnFunc(context1, projectMemberCreateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectMemberServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectMemberServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - projectMemberCreateRequest *v1.ProjectMemberCreateRequest
func (_e *MockProjectMemberServiceServer_Expecter) Create(context1 interface{}, projectMemberCreateRequest interface{}) *MockProjectMemberServiceServer_Create_Call {
	return &MockProjectMemberServiceServer_Create_Call{Call: _e.mock.On("Create", context1, projectMemberCreateRequest)}
}

func (_c *MockProjectMemberServiceServer_Create_Call) Run(run func(context1 context.Context, projectMemberCreateRequest *v1.ProjectMemberCreateRequest)) *MockProjectMemberServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectMemberCreateRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectMemberCreateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectMemberServiceServer_Create_Call) Return(projectMemberResponse *v1.ProjectMemberResponse, err error) *MockProjectMemberServiceServer_Create_Call {
	_c.Call.Return(projectMemberResponse, err)
	return _c
}

func (_c *MockProjectMemberServiceServer_Create_Call) RunAndReturn(run func(context1 context.Context, projectMemberCreateRequest *v1.ProjectMemberCreateRequest) (*v1.ProjectMemberResponse, error)) *MockProjectMemberServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProjectMemberServiceServer
func (_mock *MockProjectMemberServiceServer) Delete(context1 context.Context, projectMemberDeleteRequest *v1.ProjectMemberDeleteRequest) (*v1.ProjectMemberResponse, error) {
	ret := _mock.Called(context1, projectMemberDeleteRequest)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.ProjectMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectMemberDeleteRequest) (*v1.ProjectMemberResponse, error)); ok {
		return returnFunc(context1, projectMemberDeleteRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectMemberDeleteRequest) *v1.ProjectMemberResponse); ok {
		r0 = returnFunc(context1, projectMemberDeleteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectMemberDeleteRequest) error); ok {
		r1 = returnFunc(context1, projectMemberDeleteRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectMemberServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProjectMemberServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - projectMemberDeleteRequest *v1.ProjectMemberDeleteRequest
func (_e *MockProjectMemberServiceServer_Expecter) Delete(context1 interface{}, projectMemberDeleteRequest interface{}) *MockProjectMemberServiceServer_Delete_Call {
	return &MockProjectMemberServiceServer_Delete_Call{Call: _e.mock.On("Delete", context1, projectMemberDeleteRequest)}
}

func (_c *MockProjectMemberServiceServer_Delete_Call) Run(run func(context1 context.Context, projectMemberDeleteRequest *v1.ProjectMemberDeleteRequest)) *MockProjectMemberServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectMemberDeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectMemberDeleteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectMemberServiceServer_Delete_Call) Return(projectMemberResponse *v1.ProjectMemberResponse, err error) *MockProjectMemberServiceServer_Delete_Call {
	_c.Call.Return(projectMemberResponse, err)
	return _c
}

func (_c *MockProjectMemberServiceServer_Delete_Call) RunAndReturn(run func(context1 context.Context, projectMemberDeleteRequest *v1.ProjectMemberDeleteRequest) (*v1.ProjectMemberResponse, error)) *MockProjectMemberServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockProjectMemberServiceServer
func (_mock *MockProjectMemberServiceServer) Find(context1 context.Context, projectMemberFindRequest *v1.ProjectMemberFindRequest) (*v1.ProjectMemberListResponse, error) {
	ret := _mock.Called(context1, projectMemberFindRequest)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *v1.ProjectMemberListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectMemberFindRequest) (*v1.ProjectMemberListResponse, error)); ok {
		return returnFunc(context1, projectMemberFindRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectMemberFindRequest) *v1.ProjectMemberListResponse); ok {
		r0 = returnFunc(context1, projectMemberFindRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectMemberListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectMemberFindRequest) error); ok {
		r1 = returnFunc(context1, projectMemberFindRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectMemberServiceServer_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockProjectMemberServiceServer_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - context1 context.Context
//   - projectMemberFindRequest *v1.ProjectMemberFindRequest
func (_e *MockProjectMemberServiceServer_Expecter) Find(context1 interface{}, projectMemberFindRequest interface{}) *MockProjectMemberServiceServer_Find_Call {
	return &MockProjectMemberServiceServer_Find_Call{Call: _e.mock.On("Find", context1, projectMemberFindRequest)}
}

func (_c *MockProjectMemberServiceServer_Find_Call) Run(run func(context1 context.Context, projectMemberFindRequest *v1.ProjectMemberFindRequest)) *MockProjectMemberServiceServer_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectMemberFindRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectMemberFindRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectMemberServiceServer_Find_Call) Return(projectMemberListResponse *v1.ProjectMemberListResponse, err error) *MockProjectMemberServiceServer_Find_Call {
	_c.Call.Return(projectMemberListResponse, err)
	return _c
}

func (_c *MockProjectMemberServiceServer_Find_Call) RunAndReturn(run func(context1 context.Context, projectMemberFindRequest *v1.ProjectMemberFindRequest) (*v1.ProjectMemberListResponse, error)) *MockProjectMemberServiceServer_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockProjectMemberServiceServer
func (_mock *MockProjectMemberServiceServer) Get(context1 context.Context, projectMemberGetRequest *v1.ProjectMemberGetRequest) (*v1.ProjectMemberResponse, error) {
	ret := _mock.Called(context1, projectMemberGetRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.ProjectMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectMemberGetRequest) (*v1.ProjectMemberResponse, error)); ok {
		return returnFunc(context1, projectMemberGetRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectMemberGetRequest) *v1.ProjectMemberResponse); ok {
		r0 = returnFunc(context1, projectMemberGetRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectMemberGetRequest) error); ok {
		r1 = returnFunc(context1, projectMemberGetRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectMemberServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProjectMemberServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - projectMemberGetRequest *v1.ProjectMemberGetRequest
func (_e *MockProjectMemberServiceServer_Expecter) Get(context1 interface{}, projectMemberGetRequest interface{}) *MockProjectMemberServiceServer_Get_Call {
	return &MockProjectMemberServiceServer_Get_Call{Call: _e.mock.On("Get", context1, projectMemberGetRequest)}
}

func (_c *MockProjectMemberServiceServer_Get_Call) Run(run func(context1 context.Context, projectMemberGetRequest *v1.ProjectMemberGetRequest)) *MockProjectMemberServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectMemberGetRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectMemberGetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectMemberServiceServer_Get_Call) Return(projectMemberResponse *v1.ProjectMemberResponse, err error) *MockProjectMemberServiceServer_Get_Call {
	_c.Call.Return(projectMemberResponse, err)
	return _c
}

func (_c *MockProjectMemberServiceServer_Get_Call) RunAndReturn(run func(context1 context.Context, projectMemberGetRequest *v1.ProjectMemberGetRequest) (*v1.ProjectMemberResponse, error)) *MockProjectMemberServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockProjectMemberServiceServer
func (_mock *MockProjectMemberServiceServer) Update(context1 context.Context, projectMemberUpdateRequest *v1.ProjectMemberUpdateRequest) (*v1.ProjectMemberResponse, error) {
	ret := _mock.Called(context1, projectMemberUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.ProjectMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectMemberUpdateRequest) (*v1.ProjectMemberResponse, error)); ok {
		return returnFunc(context1, projectMemberUpdateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectMemberUpdateRequest) *v1.ProjectMemberResponse); ok {
		r0 = returnFunc(context1, projectMemberUpdateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectMemberUpdateRequest) error); ok {
		r1 = returnFunc(context1, projectMemberUpdateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectMemberServiceServer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProjectMemberServiceServer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - projectMemberUpdateRequest *v1.ProjectMemberUpdateRequest
func (_e *MockProjectMemberServiceServer_Expecter) Update(context1 interface{}, projectMemberUpdateRequest interface{}) *MockProjectMemberServiceServer_Update_Call {
	return &MockProjectMemberServiceServer_Update_Call{Call: _e.mock.On("Update", context1, projectMemberUpdateRequest)}
}

func (_c *MockProjectMemberServiceServer_Update_Call) Run(run func(context1 context.Context, projectMemberUpdateRequest *v1.ProjectMemberUpdateRequest)) *MockProjectMemberServiceServer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectMemberUpdateRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectMemberUpdateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectMemberServiceServer_Update_Call) Return(projectMemberResponse *v1.ProjectMemberResponse, err error) *MockProjectMemberServiceServer_Update_Call {
	_c.Call.Return(projectMemberResponse, err)
	return _c
}

func (_c *MockProjectMemberServiceServer_Update_Call) RunAndReturn(run func(context1 context.Context, projectMemberUpdateRequest *v1.ProjectMemberUpdateRequest) (*v1.ProjectMemberResponse, error)) *MockProjectMemberServiceServer_Update_Call {
	_c.Call.Return(run)
	return _c
}
