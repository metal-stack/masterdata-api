// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTenantMemberServiceServer creates a new instance of MockTenantMemberServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTenantMemberServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTenantMemberServiceServer {
	mock := &MockTenantMemberServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTenantMemberServiceServer is an autogenerated mock type for the TenantMemberServiceServer type
type MockTenantMemberServiceServer struct {
	mock.Mock
}

type MockTenantMemberServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTenantMemberServiceServer) EXPECT() *MockTenantMemberServiceServer_Expecter {
	return &MockTenantMemberServiceServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockTenantMemberServiceServer
func (_mock *MockTenantMemberServiceServer) Create(context1 context.Context, tenantMemberCreateRequest *v1.TenantMemberCreateRequest) (*v1.TenantMemberResponse, error) {
	ret := _mock.Called(context1, tenantMemberCreateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.TenantMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberCreateRequest) (*v1.TenantMemberResponse, error)); ok {
		return returnFunc(context1, tenantMemberCreateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberCreateRequest) *v1.TenantMemberResponse); ok {
		r0 = returnFunc(context1, tenantMemberCreateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TenantMemberCreateRequest) error); ok {
		r1 = returnFunc(context1, tenantMemberCreateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantMemberServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTenantMemberServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - tenantMemberCreateRequest *v1.TenantMemberCreateRequest
func (_e *MockTenantMemberServiceServer_Expecter) Create(context1 interface{}, tenantMemberCreateRequest interface{}) *MockTenantMemberServiceServer_Create_Call {
	return &MockTenantMemberServiceServer_Create_Call{Call: _e.mock.On("Create", context1, tenantMemberCreateRequest)}
}

func (_c *MockTenantMemberServiceServer_Create_Call) Run(run func(context1 context.Context, tenantMemberCreateRequest *v1.TenantMemberCreateRequest)) *MockTenantMemberServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TenantMemberCreateRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TenantMemberCreateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantMemberServiceServer_Create_Call) Return(tenantMemberResponse *v1.TenantMemberResponse, err error) *MockTenantMemberServiceServer_Create_Call {
	_c.Call.Return(tenantMemberResponse, err)
	return _c
}

func (_c *MockTenantMemberServiceServer_Create_Call) RunAndReturn(run func(context1 context.Context, tenantMemberCreateRequest *v1.TenantMemberCreateRequest) (*v1.TenantMemberResponse, error)) *MockTenantMemberServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockTenantMemberServiceServer
func (_mock *MockTenantMemberServiceServer) Delete(context1 context.Context, tenantMemberDeleteRequest *v1.TenantMemberDeleteRequest) (*v1.TenantMemberResponse, error) {
	ret := _mock.Called(context1, tenantMemberDeleteRequest)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.TenantMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberDeleteRequest) (*v1.TenantMemberResponse, error)); ok {
		return returnFunc(context1, tenantMemberDeleteRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberDeleteRequest) *v1.TenantMemberResponse); ok {
		r0 = returnFunc(context1, tenantMemberDeleteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TenantMemberDeleteRequest) error); ok {
		r1 = returnFunc(context1, tenantMemberDeleteRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantMemberServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTenantMemberServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - tenantMemberDeleteRequest *v1.TenantMemberDeleteRequest
func (_e *MockTenantMemberServiceServer_Expecter) Delete(context1 interface{}, tenantMemberDeleteRequest interface{}) *MockTenantMemberServiceServer_Delete_Call {
	return &MockTenantMemberServiceServer_Delete_Call{Call: _e.mock.On("Delete", context1, tenantMemberDeleteRequest)}
}

func (_c *MockTenantMemberServiceServer_Delete_Call) Run(run func(context1 context.Context, tenantMemberDeleteRequest *v1.TenantMemberDeleteRequest)) *MockTenantMemberServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TenantMemberDeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TenantMemberDeleteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantMemberServiceServer_Delete_Call) Return(tenantMemberResponse *v1.TenantMemberResponse, err error) *MockTenantMemberServiceServer_Delete_Call {
	_c.Call.Return(tenantMemberResponse, err)
	return _c
}

func (_c *MockTenantMemberServiceServer_Delete_Call) RunAndReturn(run func(context1 context.Context, tenantMemberDeleteRequest *v1.TenantMemberDeleteRequest) (*v1.TenantMemberResponse, error)) *MockTenantMemberServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockTenantMemberServiceServer
func (_mock *MockTenantMemberServiceServer) Find(context1 context.Context, tenantMemberFindRequest *v1.TenantMemberFindRequest) (*v1.TenantMemberListResponse, error) {
	ret := _mock.Called(context1, tenantMemberFindRequest)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *v1.TenantMemberListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberFindRequest) (*v1.TenantMemberListResponse, error)); ok {
		return returnFunc(context1, tenantMemberFindRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberFindRequest) *v1.TenantMemberListResponse); ok {
		r0 = returnFunc(context1, tenantMemberFindRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantMemberListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TenantMemberFindRequest) error); ok {
		r1 = returnFunc(context1, tenantMemberFindRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantMemberServiceServer_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockTenantMemberServiceServer_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - context1 context.Context
//   - tenantMemberFindRequest *v1.TenantMemberFindRequest
func (_e *MockTenantMemberServiceServer_Expecter) Find(context1 interface{}, tenantMemberFindRequest interface{}) *MockTenantMemberServiceServer_Find_Call {
	return &MockTenantMemberServiceServer_Find_Call{Call: _e.mock.On("Find", context1, tenantMemberFindRequest)}
}

func (_c *MockTenantMemberServiceServer_Find_Call) Run(run func(context1 context.Context, tenantMemberFindRequest *v1.TenantMemberFindRequest)) *MockTenantMemberServiceServer_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TenantMemberFindRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TenantMemberFindRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantMemberServiceServer_Find_Call) Return(tenantMemberListResponse *v1.TenantMemberListResponse, err error) *MockTenantMemberServiceServer_Find_Call {
	_c.Call.Return(tenantMemberListResponse, err)
	return _c
}

func (_c *MockTenantMemberServiceServer_Find_Call) RunAndReturn(run func(context1 context.Context, tenantMemberFindRequest *v1.TenantMemberFindRequest) (*v1.TenantMemberListResponse, error)) *MockTenantMemberServiceServer_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockTenantMemberServiceServer
func (_mock *MockTenantMemberServiceServer) Get(context1 context.Context, tenantMemberGetRequest *v1.TenantMemberGetRequest) (*v1.TenantMemberResponse, error) {
	ret := _mock.Called(context1, tenantMemberGetRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.TenantMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberGetRequest) (*v1.TenantMemberResponse, error)); ok {
		return returnFunc(context1, tenantMemberGetRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberGetRequest) *v1.TenantMemberResponse); ok {
		r0 = returnFunc(context1, tenantMemberGetRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TenantMemberGetRequest) error); ok {
		r1 = returnFunc(context1, tenantMemberGetRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantMemberServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTenantMemberServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - tenantMemberGetRequest *v1.TenantMemberGetRequest
func (_e *MockTenantMemberServiceServer_Expecter) Get(context1 interface{}, tenantMemberGetRequest interface{}) *MockTenantMemberServiceServer_Get_Call {
	return &MockTenantMemberServiceServer_Get_Call{Call: _e.mock.On("Get", context1, tenantMemberGetRequest)}
}

func (_c *MockTenantMemberServiceServer_Get_Call) Run(run func(context1 context.Context, tenantMemberGetRequest *v1.TenantMemberGetRequest)) *MockTenantMemberServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TenantMemberGetRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TenantMemberGetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantMemberServiceServer_Get_Call) Return(tenantMemberResponse *v1.TenantMemberResponse, err error) *MockTenantMemberServiceServer_Get_Call {
	_c.Call.Return(tenantMemberResponse, err)
	return _c
}

func (_c *MockTenantMemberServiceServer_Get_Call) RunAndReturn(run func(context1 context.Context, tenantMemberGetRequest *v1.TenantMemberGetRequest) (*v1.TenantMemberResponse, error)) *MockTenantMemberServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockTenantMemberServiceServer
func (_mock *MockTenantMemberServiceServer) Update(context1 context.Context, tenantMemberUpdateRequest *v1.TenantMemberUpdateRequest) (*v1.TenantMemberResponse, error) {
	ret := _mock.Called(context1, tenantMemberUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.TenantMemberResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberUpdateRequest) (*v1.TenantMemberResponse, error)); ok {
		return returnFunc(context1, tenantMemberUpdateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.TenantMemberUpdateRequest) *v1.TenantMemberResponse); ok {
		r0 = returnFunc(context1, tenantMemberUpdateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.TenantMemberResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.TenantMemberUpdateRequest) error); ok {
		r1 = returnFunc(context1, tenantMemberUpdateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTenantMemberServiceServer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTenantMemberServiceServer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - tenantMemberUpdateRequest *v1.TenantMemberUpdateRequest
func (_e *MockTenantMemberServiceServer_Expecter) Update(context1 interface{}, tenantMemberUpdateRequest interface{}) *MockTenantMemberServiceServer_Update_Call {
	return &MockTenantMemberServiceServer_Update_Call{Call: _e.mock.On("Update", context1, tenantMemberUpdateRequest)}
}

func (_c *MockTenantMemberServiceServer_Update_Call) Run(run func(context1 context.Context, tenantMemberUpdateRequest *v1.TenantMemberUpdateRequest)) *MockTenantMemberServiceServer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.TenantMemberUpdateRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.TenantMemberUpdateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTenantMemberServiceServer_Update_Call) Return(tenantMemberResponse *v1.TenantMemberResponse, err error) *MockTenantMemberServiceServer_Update_Call {
	_c.Call.Return(tenantMemberResponse, err)
	return _c
}

func (_c *MockTenantMemberServiceServer_Update_Call) RunAndReturn(run func(context1 context.Context, tenantMemberUpdateRequest *v1.TenantMemberUpdateRequest) (*v1.TenantMemberResponse, error)) *MockTenantMemberServiceServer_Update_Call {
	_c.Call.Return(run)
	return _c
}
