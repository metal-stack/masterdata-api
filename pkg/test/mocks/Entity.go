// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockEntity creates a new instance of MockEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEntity {
	mock := &MockEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEntity is an autogenerated mock type for the Entity type
type MockEntity struct {
	mock.Mock
}

type MockEntity_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEntity) EXPECT() *MockEntity_Expecter {
	return &MockEntity_Expecter{mock: &_m.Mock}
}

// APIVersion provides a mock function for the type MockEntity
func (_mock *MockEntity) APIVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for APIVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEntity_APIVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'APIVersion'
type MockEntity_APIVersion_Call struct {
	*mock.Call
}

// APIVersion is a helper method to define mock.On call
func (_e *MockEntity_Expecter) APIVersion() *MockEntity_APIVersion_Call {
	return &MockEntity_APIVersion_Call{Call: _e.mock.On("APIVersion")}
}

func (_c *MockEntity_APIVersion_Call) Run(run func()) *MockEntity_APIVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_APIVersion_Call) Return(s string) *MockEntity_APIVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEntity_APIVersion_Call) RunAndReturn(run func() string) *MockEntity_APIVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetMeta provides a mock function for the type MockEntity
func (_mock *MockEntity) GetMeta() *apiv1.Meta {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMeta")
	}

	var r0 *apiv1.Meta
	if returnFunc, ok := ret.Get(0).(func() *apiv1.Meta); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apiv1.Meta)
		}
	}
	return r0
}

// MockEntity_GetMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMeta'
type MockEntity_GetMeta_Call struct {
	*mock.Call
}

// GetMeta is a helper method to define mock.On call
func (_e *MockEntity_Expecter) GetMeta() *MockEntity_GetMeta_Call {
	return &MockEntity_GetMeta_Call{Call: _e.mock.On("GetMeta")}
}

func (_c *MockEntity_GetMeta_Call) Run(run func()) *MockEntity_GetMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_GetMeta_Call) Return(meta *apiv1.Meta) *MockEntity_GetMeta_Call {
	_c.Call.Return(meta)
	return _c
}

func (_c *MockEntity_GetMeta_Call) RunAndReturn(run func() *apiv1.Meta) *MockEntity_GetMeta_Call {
	_c.Call.Return(run)
	return _c
}

// JSONField provides a mock function for the type MockEntity
func (_mock *MockEntity) JSONField() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for JSONField")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEntity_JSONField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONField'
type MockEntity_JSONField_Call struct {
	*mock.Call
}

// JSONField is a helper method to define mock.On call
func (_e *MockEntity_Expecter) JSONField() *MockEntity_JSONField_Call {
	return &MockEntity_JSONField_Call{Call: _e.mock.On("JSONField")}
}

func (_c *MockEntity_JSONField_Call) Run(run func()) *MockEntity_JSONField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_JSONField_Call) Return(s string) *MockEntity_JSONField_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEntity_JSONField_Call) RunAndReturn(run func() string) *MockEntity_JSONField_Call {
	_c.Call.Return(run)
	return _c
}

// Kind provides a mock function for the type MockEntity
func (_mock *MockEntity) Kind() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Kind")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEntity_Kind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kind'
type MockEntity_Kind_Call struct {
	*mock.Call
}

// Kind is a helper method to define mock.On call
func (_e *MockEntity_Expecter) Kind() *MockEntity_Kind_Call {
	return &MockEntity_Kind_Call{Call: _e.mock.On("Kind")}
}

func (_c *MockEntity_Kind_Call) Run(run func()) *MockEntity_Kind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_Kind_Call) Return(s string) *MockEntity_Kind_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEntity_Kind_Call) RunAndReturn(run func() string) *MockEntity_Kind_Call {
	_c.Call.Return(run)
	return _c
}

// Schema provides a mock function for the type MockEntity
func (_mock *MockEntity) Schema() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Schema")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEntity_Schema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Schema'
type MockEntity_Schema_Call struct {
	*mock.Call
}

// Schema is a helper method to define mock.On call
func (_e *MockEntity_Expecter) Schema() *MockEntity_Schema_Call {
	return &MockEntity_Schema_Call{Call: _e.mock.On("Schema")}
}

func (_c *MockEntity_Schema_Call) Run(run func()) *MockEntity_Schema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_Schema_Call) Return(s string) *MockEntity_Schema_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEntity_Schema_Call) RunAndReturn(run func() string) *MockEntity_Schema_Call {
	_c.Call.Return(run)
	return _c
}

// TableName provides a mock function for the type MockEntity
func (_mock *MockEntity) TableName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TableName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockEntity_TableName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TableName'
type MockEntity_TableName_Call struct {
	*mock.Call
}

// TableName is a helper method to define mock.On call
func (_e *MockEntity_Expecter) TableName() *MockEntity_TableName_Call {
	return &MockEntity_TableName_Call{Call: _e.mock.On("TableName")}
}

func (_c *MockEntity_TableName_Call) Run(run func()) *MockEntity_TableName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEntity_TableName_Call) Return(s string) *MockEntity_TableName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockEntity_TableName_Call) RunAndReturn(run func() string) *MockEntity_TableName_Call {
	_c.Call.Return(run)
	return _c
}
