// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// NewMockProjectServiceServer creates a new instance of MockProjectServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectServiceServer {
	mock := &MockProjectServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectServiceServer is an autogenerated mock type for the ProjectServiceServer type
type MockProjectServiceServer struct {
	mock.Mock
}

type MockProjectServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectServiceServer) EXPECT() *MockProjectServiceServer_Expecter {
	return &MockProjectServiceServer_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockProjectServiceServer
func (_mock *MockProjectServiceServer) Create(context1 context.Context, projectCreateRequest *v1.ProjectCreateRequest) (*v1.ProjectResponse, error) {
	ret := _mock.Called(context1, projectCreateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *v1.ProjectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectCreateRequest) (*v1.ProjectResponse, error)); ok {
		return returnFunc(context1, projectCreateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectCreateRequest) *v1.ProjectResponse); ok {
		r0 = returnFunc(context1, projectCreateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectCreateRequest) error); ok {
		r1 = returnFunc(context1, projectCreateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceServer_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockProjectServiceServer_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - context1 context.Context
//   - projectCreateRequest *v1.ProjectCreateRequest
func (_e *MockProjectServiceServer_Expecter) Create(context1 interface{}, projectCreateRequest interface{}) *MockProjectServiceServer_Create_Call {
	return &MockProjectServiceServer_Create_Call{Call: _e.mock.On("Create", context1, projectCreateRequest)}
}

func (_c *MockProjectServiceServer_Create_Call) Run(run func(context1 context.Context, projectCreateRequest *v1.ProjectCreateRequest)) *MockProjectServiceServer_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectCreateRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectCreateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceServer_Create_Call) Return(projectResponse *v1.ProjectResponse, err error) *MockProjectServiceServer_Create_Call {
	_c.Call.Return(projectResponse, err)
	return _c
}

func (_c *MockProjectServiceServer_Create_Call) RunAndReturn(run func(context1 context.Context, projectCreateRequest *v1.ProjectCreateRequest) (*v1.ProjectResponse, error)) *MockProjectServiceServer_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockProjectServiceServer
func (_mock *MockProjectServiceServer) Delete(context1 context.Context, projectDeleteRequest *v1.ProjectDeleteRequest) (*v1.ProjectResponse, error) {
	ret := _mock.Called(context1, projectDeleteRequest)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *v1.ProjectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectDeleteRequest) (*v1.ProjectResponse, error)); ok {
		return returnFunc(context1, projectDeleteRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectDeleteRequest) *v1.ProjectResponse); ok {
		r0 = returnFunc(context1, projectDeleteRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectDeleteRequest) error); ok {
		r1 = returnFunc(context1, projectDeleteRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockProjectServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - context1 context.Context
//   - projectDeleteRequest *v1.ProjectDeleteRequest
func (_e *MockProjectServiceServer_Expecter) Delete(context1 interface{}, projectDeleteRequest interface{}) *MockProjectServiceServer_Delete_Call {
	return &MockProjectServiceServer_Delete_Call{Call: _e.mock.On("Delete", context1, projectDeleteRequest)}
}

func (_c *MockProjectServiceServer_Delete_Call) Run(run func(context1 context.Context, projectDeleteRequest *v1.ProjectDeleteRequest)) *MockProjectServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectDeleteRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectDeleteRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceServer_Delete_Call) Return(projectResponse *v1.ProjectResponse, err error) *MockProjectServiceServer_Delete_Call {
	_c.Call.Return(projectResponse, err)
	return _c
}

func (_c *MockProjectServiceServer_Delete_Call) RunAndReturn(run func(context1 context.Context, projectDeleteRequest *v1.ProjectDeleteRequest) (*v1.ProjectResponse, error)) *MockProjectServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function for the type MockProjectServiceServer
func (_mock *MockProjectServiceServer) Find(context1 context.Context, projectFindRequest *v1.ProjectFindRequest) (*v1.ProjectListResponse, error) {
	ret := _mock.Called(context1, projectFindRequest)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *v1.ProjectListResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectFindRequest) (*v1.ProjectListResponse, error)); ok {
		return returnFunc(context1, projectFindRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectFindRequest) *v1.ProjectListResponse); ok {
		r0 = returnFunc(context1, projectFindRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectFindRequest) error); ok {
		r1 = returnFunc(context1, projectFindRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceServer_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockProjectServiceServer_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - context1 context.Context
//   - projectFindRequest *v1.ProjectFindRequest
func (_e *MockProjectServiceServer_Expecter) Find(context1 interface{}, projectFindRequest interface{}) *MockProjectServiceServer_Find_Call {
	return &MockProjectServiceServer_Find_Call{Call: _e.mock.On("Find", context1, projectFindRequest)}
}

func (_c *MockProjectServiceServer_Find_Call) Run(run func(context1 context.Context, projectFindRequest *v1.ProjectFindRequest)) *MockProjectServiceServer_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectFindRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectFindRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceServer_Find_Call) Return(projectListResponse *v1.ProjectListResponse, err error) *MockProjectServiceServer_Find_Call {
	_c.Call.Return(projectListResponse, err)
	return _c
}

func (_c *MockProjectServiceServer_Find_Call) RunAndReturn(run func(context1 context.Context, projectFindRequest *v1.ProjectFindRequest) (*v1.ProjectListResponse, error)) *MockProjectServiceServer_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockProjectServiceServer
func (_mock *MockProjectServiceServer) Get(context1 context.Context, projectGetRequest *v1.ProjectGetRequest) (*v1.ProjectResponse, error) {
	ret := _mock.Called(context1, projectGetRequest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *v1.ProjectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectGetRequest) (*v1.ProjectResponse, error)); ok {
		return returnFunc(context1, projectGetRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectGetRequest) *v1.ProjectResponse); ok {
		r0 = returnFunc(context1, projectGetRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectGetRequest) error); ok {
		r1 = returnFunc(context1, projectGetRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceServer_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockProjectServiceServer_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - projectGetRequest *v1.ProjectGetRequest
func (_e *MockProjectServiceServer_Expecter) Get(context1 interface{}, projectGetRequest interface{}) *MockProjectServiceServer_Get_Call {
	return &MockProjectServiceServer_Get_Call{Call: _e.mock.On("Get", context1, projectGetRequest)}
}

func (_c *MockProjectServiceServer_Get_Call) Run(run func(context1 context.Context, projectGetRequest *v1.ProjectGetRequest)) *MockProjectServiceServer_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectGetRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectGetRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceServer_Get_Call) Return(projectResponse *v1.ProjectResponse, err error) *MockProjectServiceServer_Get_Call {
	_c.Call.Return(projectResponse, err)
	return _c
}

func (_c *MockProjectServiceServer_Get_Call) RunAndReturn(run func(context1 context.Context, projectGetRequest *v1.ProjectGetRequest) (*v1.ProjectResponse, error)) *MockProjectServiceServer_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetHistory provides a mock function for the type MockProjectServiceServer
func (_mock *MockProjectServiceServer) GetHistory(context1 context.Context, projectGetHistoryRequest *v1.ProjectGetHistoryRequest) (*v1.ProjectResponse, error) {
	ret := _mock.Called(context1, projectGetHistoryRequest)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 *v1.ProjectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectGetHistoryRequest) (*v1.ProjectResponse, error)); ok {
		return returnFunc(context1, projectGetHistoryRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectGetHistoryRequest) *v1.ProjectResponse); ok {
		r0 = returnFunc(context1, projectGetHistoryRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectGetHistoryRequest) error); ok {
		r1 = returnFunc(context1, projectGetHistoryRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceServer_GetHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHistory'
type MockProjectServiceServer_GetHistory_Call struct {
	*mock.Call
}

// GetHistory is a helper method to define mock.On call
//   - context1 context.Context
//   - projectGetHistoryRequest *v1.ProjectGetHistoryRequest
func (_e *MockProjectServiceServer_Expecter) GetHistory(context1 interface{}, projectGetHistoryRequest interface{}) *MockProjectServiceServer_GetHistory_Call {
	return &MockProjectServiceServer_GetHistory_Call{Call: _e.mock.On("GetHistory", context1, projectGetHistoryRequest)}
}

func (_c *MockProjectServiceServer_GetHistory_Call) Run(run func(context1 context.Context, projectGetHistoryRequest *v1.ProjectGetHistoryRequest)) *MockProjectServiceServer_GetHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectGetHistoryRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectGetHistoryRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceServer_GetHistory_Call) Return(projectResponse *v1.ProjectResponse, err error) *MockProjectServiceServer_GetHistory_Call {
	_c.Call.Return(projectResponse, err)
	return _c
}

func (_c *MockProjectServiceServer_GetHistory_Call) RunAndReturn(run func(context1 context.Context, projectGetHistoryRequest *v1.ProjectGetHistoryRequest) (*v1.ProjectResponse, error)) *MockProjectServiceServer_GetHistory_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockProjectServiceServer
func (_mock *MockProjectServiceServer) Update(context1 context.Context, projectUpdateRequest *v1.ProjectUpdateRequest) (*v1.ProjectResponse, error) {
	ret := _mock.Called(context1, projectUpdateRequest)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *v1.ProjectResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectUpdateRequest) (*v1.ProjectResponse, error)); ok {
		return returnFunc(context1, projectUpdateRequest)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1.ProjectUpdateRequest) *v1.ProjectResponse); ok {
		r0 = returnFunc(context1, projectUpdateRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.ProjectResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1.ProjectUpdateRequest) error); ok {
		r1 = returnFunc(context1, projectUpdateRequest)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectServiceServer_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProjectServiceServer_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - projectUpdateRequest *v1.ProjectUpdateRequest
func (_e *MockProjectServiceServer_Expecter) Update(context1 interface{}, projectUpdateRequest interface{}) *MockProjectServiceServer_Update_Call {
	return &MockProjectServiceServer_Update_Call{Call: _e.mock.On("Update", context1, projectUpdateRequest)}
}

func (_c *MockProjectServiceServer_Update_Call) Run(run func(context1 context.Context, projectUpdateRequest *v1.ProjectUpdateRequest)) *MockProjectServiceServer_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1.ProjectUpdateRequest
		if args[1] != nil {
			arg1 = args[1].(*v1.ProjectUpdateRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectServiceServer_Update_Call) Return(projectResponse *v1.ProjectResponse, err error) *MockProjectServiceServer_Update_Call {
	_c.Call.Return(projectResponse, err)
	return _c
}

func (_c *MockProjectServiceServer_Update_Call) RunAndReturn(run func(context1 context.Context, projectUpdateRequest *v1.ProjectUpdateRequest) (*v1.ProjectResponse, error)) *MockProjectServiceServer_Update_Call {
	_c.Call.Return(run)
	return _c
}
