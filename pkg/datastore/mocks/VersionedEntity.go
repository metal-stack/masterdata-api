// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	v1 "github.com/metal-stack/masterdata-api/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// VersionedEntity is an autogenerated mock type for the VersionedEntity type
type VersionedEntity struct {
	mock.Mock
}

// APIVersion provides a mock function with given fields:
func (_m *VersionedEntity) APIVersion() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetMeta provides a mock function with given fields:
func (_m *VersionedEntity) GetMeta() *v1.Meta {
	ret := _m.Called()

	var r0 *v1.Meta
	if rf, ok := ret.Get(0).(func() *v1.Meta); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Meta)
		}
	}

	return r0
}

// Kind provides a mock function with given fields:
func (_m *VersionedEntity) Kind() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewVersionedEntity interface {
	mock.TestingT
	Cleanup(func())
}

// NewVersionedEntity creates a new instance of VersionedEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewVersionedEntity(t mockConstructorTestingTNewVersionedEntity) *VersionedEntity {
	mock := &VersionedEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
