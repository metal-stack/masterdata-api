// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	datastore "github.com/metal-stack/masterdata-api/pkg/datastore"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, ve
func (_m *Storage) Create(ctx context.Context, ve datastore.VersionedJSONEntity) error {
	ret := _m.Called(ctx, ve)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.VersionedJSONEntity) error); ok {
		r0 = rf(ctx, ve)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, ve
func (_m *Storage) Delete(ctx context.Context, ve datastore.VersionedJSONEntity) error {
	ret := _m.Called(ctx, ve)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.VersionedJSONEntity) error); ok {
		r0 = rf(ctx, ve)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, filter, result
func (_m *Storage) Find(ctx context.Context, filter map[string]interface{}, result interface{}) error {
	ret := _m.Called(ctx, filter, result)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, interface{}) error); ok {
		r0 = rf(ctx, filter, result)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id, ve
func (_m *Storage) Get(ctx context.Context, id string, ve datastore.VersionedJSONEntity) error {
	ret := _m.Called(ctx, id, ve)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, datastore.VersionedJSONEntity) error); ok {
		r0 = rf(ctx, id, ve)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, ve
func (_m *Storage) Update(ctx context.Context, ve datastore.VersionedJSONEntity) error {
	ret := _m.Called(ctx, ve)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, datastore.VersionedJSONEntity) error); ok {
		r0 = rf(ctx, ve)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
